{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='awsManagedControlPlane', url='', help='"AWSManagedControlPlane is the schema for the Amazon EKS Managed Control Plane API."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of AWSManagedControlPlane', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'controlplane.cluster.x-k8s.io/v1beta1',
    kind: 'AWSManagedControlPlane',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"AWSManagedControlPlaneSpec defines the desired state of an Amazon EKS Cluster."'),
  spec: {
    '#addons':: d.obj(help='"Addons defines the EKS addons to enable with the EKS cluster."'),
    addons: {
      '#withConfiguration':: d.fn(help='"Configuration of the EKS addon"', args=[d.arg(name='configuration', type=d.T.string)]),
      withConfiguration(configuration): { configuration: configuration },
      '#withConflictResolution':: d.fn(help='"ConflictResolution is used to declare what should happen if there\\nare parameter conflicts. Defaults to none"', args=[d.arg(name='conflictResolution', type=d.T.string)]),
      withConflictResolution(conflictResolution): { conflictResolution: conflictResolution },
      '#withName':: d.fn(help='"Name is the name of the addon"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withServiceAccountRoleARN':: d.fn(help='"ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account"', args=[d.arg(name='serviceAccountRoleARN', type=d.T.string)]),
      withServiceAccountRoleARN(serviceAccountRoleARN): { serviceAccountRoleARN: serviceAccountRoleARN },
      '#withVersion':: d.fn(help='"Version is the version of the addon to use"', args=[d.arg(name='version', type=d.T.string)]),
      withVersion(version): { version: version },
    },
    '#bastion':: d.obj(help='"Bastion contains options to configure the bastion host."'),
    bastion: {
      '#withAllowedCIDRBlocks':: d.fn(help="\"AllowedCIDRBlocks is a list of CIDR blocks allowed to access the bastion host.\\nThey are set as ingress rules for the Bastion host's Security Group (defaults to 0.0.0.0/0).\"", args=[d.arg(name='allowedCIDRBlocks', type=d.T.array)]),
      withAllowedCIDRBlocks(allowedCIDRBlocks): { spec+: { bastion+: { allowedCIDRBlocks: if std.isArray(v=allowedCIDRBlocks) then allowedCIDRBlocks else [allowedCIDRBlocks] } } },
      '#withAllowedCIDRBlocksMixin':: d.fn(help="\"AllowedCIDRBlocks is a list of CIDR blocks allowed to access the bastion host.\\nThey are set as ingress rules for the Bastion host's Security Group (defaults to 0.0.0.0/0).\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='allowedCIDRBlocks', type=d.T.array)]),
      withAllowedCIDRBlocksMixin(allowedCIDRBlocks): { spec+: { bastion+: { allowedCIDRBlocks+: if std.isArray(v=allowedCIDRBlocks) then allowedCIDRBlocks else [allowedCIDRBlocks] } } },
      '#withAmi':: d.fn(help='"AMI will use the specified AMI to boot the bastion. If not specified,\\nthe AMI will default to one picked out in public space."', args=[d.arg(name='ami', type=d.T.string)]),
      withAmi(ami): { spec+: { bastion+: { ami: ami } } },
      '#withDisableIngressRules':: d.fn(help="\"DisableIngressRules will ensure there are no Ingress rules in the bastion host's security group.\\nRequires AllowedCIDRBlocks to be empty.\"", args=[d.arg(name='disableIngressRules', type=d.T.boolean)]),
      withDisableIngressRules(disableIngressRules): { spec+: { bastion+: { disableIngressRules: disableIngressRules } } },
      '#withEnabled':: d.fn(help='"Enabled allows this provider to create a bastion host instance\\nwith a public ip to access the VPC private network."', args=[d.arg(name='enabled', type=d.T.boolean)]),
      withEnabled(enabled): { spec+: { bastion+: { enabled: enabled } } },
      '#withInstanceType':: d.fn(help='"InstanceType will use the specified instance type for the bastion. If not specified,\\nCluster API Provider AWS will use t3.micro for all regions except us-east-1, where t2.micro\\nwill be the default."', args=[d.arg(name='instanceType', type=d.T.string)]),
      withInstanceType(instanceType): { spec+: { bastion+: { instanceType: instanceType } } },
    },
    '#controlPlaneEndpoint':: d.obj(help='"ControlPlaneEndpoint represents the endpoint used to communicate with the control plane."'),
    controlPlaneEndpoint: {
      '#withHost':: d.fn(help='"The hostname on which the API server is serving."', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { controlPlaneEndpoint+: { host: host } } },
      '#withPort':: d.fn(help='"The port on which the API server is serving."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { controlPlaneEndpoint+: { port: port } } },
    },
    '#encryptionConfig':: d.obj(help='"EncryptionConfig specifies the encryption configuration for the cluster"'),
    encryptionConfig: {
      '#withProvider':: d.fn(help='"Provider specifies the ARN or alias of the CMK (in AWS KMS)"', args=[d.arg(name='provider', type=d.T.string)]),
      withProvider(provider): { spec+: { encryptionConfig+: { provider: provider } } },
      '#withResources':: d.fn(help='"Resources specifies the resources to be encrypted"', args=[d.arg(name='resources', type=d.T.array)]),
      withResources(resources): { spec+: { encryptionConfig+: { resources: if std.isArray(v=resources) then resources else [resources] } } },
      '#withResourcesMixin':: d.fn(help='"Resources specifies the resources to be encrypted"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resources', type=d.T.array)]),
      withResourcesMixin(resources): { spec+: { encryptionConfig+: { resources+: if std.isArray(v=resources) then resources else [resources] } } },
    },
    '#endpointAccess':: d.obj(help="\"Endpoints specifies access to this cluster's control plane endpoints\""),
    endpointAccess: {
      '#withPrivate':: d.fn(help='"Private points VPC-internal control plane access to the private endpoint"', args=[d.arg(name='private', type=d.T.boolean)]),
      withPrivate(private): { spec+: { endpointAccess+: { private: private } } },
      '#withPublic':: d.fn(help='"Public controls whether control plane endpoints are publicly accessible"', args=[d.arg(name='public', type=d.T.boolean)]),
      withPublic(public): { spec+: { endpointAccess+: { public: public } } },
      '#withPublicCIDRs':: d.fn(help='"PublicCIDRs specifies which blocks can access the public endpoint"', args=[d.arg(name='publicCIDRs', type=d.T.array)]),
      withPublicCIDRs(publicCIDRs): { spec+: { endpointAccess+: { publicCIDRs: if std.isArray(v=publicCIDRs) then publicCIDRs else [publicCIDRs] } } },
      '#withPublicCIDRsMixin':: d.fn(help='"PublicCIDRs specifies which blocks can access the public endpoint"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='publicCIDRs', type=d.T.array)]),
      withPublicCIDRsMixin(publicCIDRs): { spec+: { endpointAccess+: { publicCIDRs+: if std.isArray(v=publicCIDRs) then publicCIDRs else [publicCIDRs] } } },
    },
    '#iamAuthenticatorConfig':: d.obj(help='"IAMAuthenticatorConfig allows the specification of any additional user or role mappings\\nfor use when generating the aws-iam-authenticator configuration. If this is nil the\\ndefault configuration is still generated for the cluster."'),
    iamAuthenticatorConfig: {
      '#mapRoles':: d.obj(help='"RoleMappings is a list of role mappings"'),
      mapRoles: {
        '#withGroups':: d.fn(help='"Groups is a list of kubernetes RBAC groups"', args=[d.arg(name='groups', type=d.T.array)]),
        withGroups(groups): { groups: if std.isArray(v=groups) then groups else [groups] },
        '#withGroupsMixin':: d.fn(help='"Groups is a list of kubernetes RBAC groups"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='groups', type=d.T.array)]),
        withGroupsMixin(groups): { groups+: if std.isArray(v=groups) then groups else [groups] },
        '#withRolearn':: d.fn(help='"RoleARN is the AWS ARN for the role to map"', args=[d.arg(name='rolearn', type=d.T.string)]),
        withRolearn(rolearn): { rolearn: rolearn },
        '#withUsername':: d.fn(help='"UserName is a kubernetes RBAC user subject"', args=[d.arg(name='username', type=d.T.string)]),
        withUsername(username): { username: username },
      },
      '#mapUsers':: d.obj(help='"UserMappings is a list of user mappings"'),
      mapUsers: {
        '#withGroups':: d.fn(help='"Groups is a list of kubernetes RBAC groups"', args=[d.arg(name='groups', type=d.T.array)]),
        withGroups(groups): { groups: if std.isArray(v=groups) then groups else [groups] },
        '#withGroupsMixin':: d.fn(help='"Groups is a list of kubernetes RBAC groups"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='groups', type=d.T.array)]),
        withGroupsMixin(groups): { groups+: if std.isArray(v=groups) then groups else [groups] },
        '#withUserarn':: d.fn(help='"UserARN is the AWS ARN for the user to map"', args=[d.arg(name='userarn', type=d.T.string)]),
        withUserarn(userarn): { userarn: userarn },
        '#withUsername':: d.fn(help='"UserName is a kubernetes RBAC user subject"', args=[d.arg(name='username', type=d.T.string)]),
        withUsername(username): { username: username },
      },
      '#withMapRoles':: d.fn(help='"RoleMappings is a list of role mappings"', args=[d.arg(name='mapRoles', type=d.T.array)]),
      withMapRoles(mapRoles): { spec+: { iamAuthenticatorConfig+: { mapRoles: if std.isArray(v=mapRoles) then mapRoles else [mapRoles] } } },
      '#withMapRolesMixin':: d.fn(help='"RoleMappings is a list of role mappings"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mapRoles', type=d.T.array)]),
      withMapRolesMixin(mapRoles): { spec+: { iamAuthenticatorConfig+: { mapRoles+: if std.isArray(v=mapRoles) then mapRoles else [mapRoles] } } },
      '#withMapUsers':: d.fn(help='"UserMappings is a list of user mappings"', args=[d.arg(name='mapUsers', type=d.T.array)]),
      withMapUsers(mapUsers): { spec+: { iamAuthenticatorConfig+: { mapUsers: if std.isArray(v=mapUsers) then mapUsers else [mapUsers] } } },
      '#withMapUsersMixin':: d.fn(help='"UserMappings is a list of user mappings"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mapUsers', type=d.T.array)]),
      withMapUsersMixin(mapUsers): { spec+: { iamAuthenticatorConfig+: { mapUsers+: if std.isArray(v=mapUsers) then mapUsers else [mapUsers] } } },
    },
    '#identityRef':: d.obj(help='"IdentityRef is a reference to an identity to be used when reconciling the managed control plane.\\nIf no identity is specified, the default identity for this controller will be used."'),
    identityRef: {
      '#withKind':: d.fn(help='"Kind of the identity."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { identityRef+: { kind: kind } } },
      '#withName':: d.fn(help='"Name of the identity."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { identityRef+: { name: name } } },
    },
    '#kubeProxy':: d.obj(help='"KubeProxy defines managed attributes of the kube-proxy daemonset"'),
    kubeProxy: {
      '#withDisable':: d.fn(help='"Disable set to true indicates that kube-proxy should be disabled. With EKS clusters\\nkube-proxy is automatically installed into the cluster. For clusters where you want\\nto use kube-proxy functionality that is provided with an alternate CNI, this option\\nprovides a way to specify that the kube-proxy daemonset should be deleted. You cannot\\nset this to true if you are using the Amazon kube-proxy addon."', args=[d.arg(name='disable', type=d.T.boolean)]),
      withDisable(disable): { spec+: { kubeProxy+: { disable: disable } } },
    },
    '#logging':: d.obj(help='"Logging specifies which EKS Cluster logs should be enabled. Entries for\\neach of the enabled logs will be sent to CloudWatch"'),
    logging: {
      '#withApiServer':: d.fn(help='"APIServer indicates if the Kubernetes API Server log (kube-apiserver) shoulkd be enabled"', args=[d.arg(name='apiServer', type=d.T.boolean)]),
      withApiServer(apiServer): { spec+: { logging+: { apiServer: apiServer } } },
      '#withAudit':: d.fn(help='"Audit indicates if the Kubernetes API audit log should be enabled"', args=[d.arg(name='audit', type=d.T.boolean)]),
      withAudit(audit): { spec+: { logging+: { audit: audit } } },
      '#withAuthenticator':: d.fn(help='"Authenticator indicates if the iam authenticator log should be enabled"', args=[d.arg(name='authenticator', type=d.T.boolean)]),
      withAuthenticator(authenticator): { spec+: { logging+: { authenticator: authenticator } } },
      '#withControllerManager':: d.fn(help='"ControllerManager indicates if the controller manager (kube-controller-manager) log should be enabled"', args=[d.arg(name='controllerManager', type=d.T.boolean)]),
      withControllerManager(controllerManager): { spec+: { logging+: { controllerManager: controllerManager } } },
      '#withScheduler':: d.fn(help='"Scheduler indicates if the Kubernetes scheduler (kube-scheduler) log should be enabled"', args=[d.arg(name='scheduler', type=d.T.boolean)]),
      withScheduler(scheduler): { spec+: { logging+: { scheduler: scheduler } } },
    },
    '#network':: d.obj(help='"NetworkSpec encapsulates all things related to AWS network."'),
    network: {
      '#additionalControlPlaneIngressRules':: d.obj(help='"AdditionalControlPlaneIngressRules is an optional set of ingress rules to add to the control plane"'),
      additionalControlPlaneIngressRules: {
        '#withCidrBlocks':: d.fn(help='"List of CIDR blocks to allow access from. Cannot be specified with SourceSecurityGroupID."', args=[d.arg(name='cidrBlocks', type=d.T.array)]),
        withCidrBlocks(cidrBlocks): { cidrBlocks: if std.isArray(v=cidrBlocks) then cidrBlocks else [cidrBlocks] },
        '#withCidrBlocksMixin':: d.fn(help='"List of CIDR blocks to allow access from. Cannot be specified with SourceSecurityGroupID."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cidrBlocks', type=d.T.array)]),
        withCidrBlocksMixin(cidrBlocks): { cidrBlocks+: if std.isArray(v=cidrBlocks) then cidrBlocks else [cidrBlocks] },
        '#withDescription':: d.fn(help='"Description provides extended information about the ingress rule."', args=[d.arg(name='description', type=d.T.string)]),
        withDescription(description): { description: description },
        '#withFromPort':: d.fn(help='"FromPort is the start of port range."', args=[d.arg(name='fromPort', type=d.T.integer)]),
        withFromPort(fromPort): { fromPort: fromPort },
        '#withIpv6CidrBlocks':: d.fn(help='"List of IPv6 CIDR blocks to allow access from. Cannot be specified with SourceSecurityGroupID."', args=[d.arg(name='ipv6CidrBlocks', type=d.T.array)]),
        withIpv6CidrBlocks(ipv6CidrBlocks): { ipv6CidrBlocks: if std.isArray(v=ipv6CidrBlocks) then ipv6CidrBlocks else [ipv6CidrBlocks] },
        '#withIpv6CidrBlocksMixin':: d.fn(help='"List of IPv6 CIDR blocks to allow access from. Cannot be specified with SourceSecurityGroupID."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipv6CidrBlocks', type=d.T.array)]),
        withIpv6CidrBlocksMixin(ipv6CidrBlocks): { ipv6CidrBlocks+: if std.isArray(v=ipv6CidrBlocks) then ipv6CidrBlocks else [ipv6CidrBlocks] },
        '#withNatGatewaysIPsSource':: d.fn(help='"NatGatewaysIPsSource use the NAT gateways IPs as the source for the ingress rule."', args=[d.arg(name='natGatewaysIPsSource', type=d.T.boolean)]),
        withNatGatewaysIPsSource(natGatewaysIPsSource): { natGatewaysIPsSource: natGatewaysIPsSource },
        '#withProtocol':: d.fn(help='"Protocol is the protocol for the ingress rule. Accepted values are \\"-1\\" (all), \\"4\\" (IP in IP),\\"tcp\\", \\"udp\\", \\"icmp\\", and \\"58\\" (ICMPv6), \\"50\\" (ESP)."', args=[d.arg(name='protocol', type=d.T.string)]),
        withProtocol(protocol): { protocol: protocol },
        '#withSourceSecurityGroupIds':: d.fn(help='"The security group id to allow access from. Cannot be specified with CidrBlocks."', args=[d.arg(name='sourceSecurityGroupIds', type=d.T.array)]),
        withSourceSecurityGroupIds(sourceSecurityGroupIds): { sourceSecurityGroupIds: if std.isArray(v=sourceSecurityGroupIds) then sourceSecurityGroupIds else [sourceSecurityGroupIds] },
        '#withSourceSecurityGroupIdsMixin':: d.fn(help='"The security group id to allow access from. Cannot be specified with CidrBlocks."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sourceSecurityGroupIds', type=d.T.array)]),
        withSourceSecurityGroupIdsMixin(sourceSecurityGroupIds): { sourceSecurityGroupIds+: if std.isArray(v=sourceSecurityGroupIds) then sourceSecurityGroupIds else [sourceSecurityGroupIds] },
        '#withSourceSecurityGroupRoles':: d.fn(help='"The security group role to allow access from. Cannot be specified with CidrBlocks.\\nThe field will be combined with source security group IDs if specified."', args=[d.arg(name='sourceSecurityGroupRoles', type=d.T.array)]),
        withSourceSecurityGroupRoles(sourceSecurityGroupRoles): { sourceSecurityGroupRoles: if std.isArray(v=sourceSecurityGroupRoles) then sourceSecurityGroupRoles else [sourceSecurityGroupRoles] },
        '#withSourceSecurityGroupRolesMixin':: d.fn(help='"The security group role to allow access from. Cannot be specified with CidrBlocks.\\nThe field will be combined with source security group IDs if specified."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sourceSecurityGroupRoles', type=d.T.array)]),
        withSourceSecurityGroupRolesMixin(sourceSecurityGroupRoles): { sourceSecurityGroupRoles+: if std.isArray(v=sourceSecurityGroupRoles) then sourceSecurityGroupRoles else [sourceSecurityGroupRoles] },
        '#withToPort':: d.fn(help='"ToPort is the end of port range."', args=[d.arg(name='toPort', type=d.T.integer)]),
        withToPort(toPort): { toPort: toPort },
      },
      '#cni':: d.obj(help='"CNI configuration"'),
      cni: {
        '#cniIngressRules':: d.obj(help='"CNIIngressRules specify rules to apply to control plane and worker node security groups.\\nThe source for the rule will be set to control plane and worker security group IDs."'),
        cniIngressRules: {
          '#withDescription':: d.fn(help='', args=[d.arg(name='description', type=d.T.string)]),
          withDescription(description): { description: description },
          '#withFromPort':: d.fn(help='', args=[d.arg(name='fromPort', type=d.T.integer)]),
          withFromPort(fromPort): { fromPort: fromPort },
          '#withProtocol':: d.fn(help='"SecurityGroupProtocol defines the protocol type for a security group rule."', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
          '#withToPort':: d.fn(help='', args=[d.arg(name='toPort', type=d.T.integer)]),
          withToPort(toPort): { toPort: toPort },
        },
        '#withCniIngressRules':: d.fn(help='"CNIIngressRules specify rules to apply to control plane and worker node security groups.\\nThe source for the rule will be set to control plane and worker security group IDs."', args=[d.arg(name='cniIngressRules', type=d.T.array)]),
        withCniIngressRules(cniIngressRules): { spec+: { network+: { cni+: { cniIngressRules: if std.isArray(v=cniIngressRules) then cniIngressRules else [cniIngressRules] } } } },
        '#withCniIngressRulesMixin':: d.fn(help='"CNIIngressRules specify rules to apply to control plane and worker node security groups.\\nThe source for the rule will be set to control plane and worker security group IDs."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cniIngressRules', type=d.T.array)]),
        withCniIngressRulesMixin(cniIngressRules): { spec+: { network+: { cni+: { cniIngressRules+: if std.isArray(v=cniIngressRules) then cniIngressRules else [cniIngressRules] } } } },
      },
      '#subnets':: d.obj(help='"Subnets configuration."'),
      subnets: {
        '#withAvailabilityZone':: d.fn(help="\"AvailabilityZone defines the availability zone to use for this subnet in the cluster's region.\"", args=[d.arg(name='availabilityZone', type=d.T.string)]),
        withAvailabilityZone(availabilityZone): { availabilityZone: availabilityZone },
        '#withCidrBlock':: d.fn(help='"CidrBlock is the CIDR block to be used when the provider creates a managed VPC."', args=[d.arg(name='cidrBlock', type=d.T.string)]),
        withCidrBlock(cidrBlock): { cidrBlock: cidrBlock },
        '#withId':: d.fn(help="\"ID defines a unique identifier to reference this resource.\\nIf you're bringing your subnet, set the AWS subnet-id here, it must start with `subnet-`.\\n\\nWhen the VPC is managed by CAPA, and you'd like the provider to create a subnet for you,\\nthe id can be set to any placeholder value that does not start with `subnet-`;\\nupon creation, the subnet AWS identifier will be populated in the `ResourceID` field and\\nthe `id` field is going to be used as the subnet name. If you specify a tag\\ncalled `Name`, it takes precedence.\"", args=[d.arg(name='id', type=d.T.string)]),
        withId(id): { id: id },
        '#withIpv6CidrBlock':: d.fn(help='"IPv6CidrBlock is the IPv6 CIDR block to be used when the provider creates a managed VPC.\\nA subnet can have an IPv4 and an IPv6 address.\\nIPv6 is only supported in managed clusters, this field cannot be set on AWSCluster object."', args=[d.arg(name='ipv6CidrBlock', type=d.T.string)]),
        withIpv6CidrBlock(ipv6CidrBlock): { ipv6CidrBlock: ipv6CidrBlock },
        '#withIsIpv6':: d.fn(help='"IsIPv6 defines the subnet as an IPv6 subnet. A subnet is IPv6 when it is associated with a VPC that has IPv6 enabled.\\nIPv6 is only supported in managed clusters, this field cannot be set on AWSCluster object."', args=[d.arg(name='isIpv6', type=d.T.boolean)]),
        withIsIpv6(isIpv6): { isIpv6: isIpv6 },
        '#withIsPublic':: d.fn(help='"IsPublic defines the subnet as a public subnet. A subnet is public when it is associated with a route table that has a route to an internet gateway."', args=[d.arg(name='isPublic', type=d.T.boolean)]),
        withIsPublic(isPublic): { isPublic: isPublic },
        '#withNatGatewayId':: d.fn(help='"NatGatewayID is the NAT gateway id associated with the subnet.\\nIgnored unless the subnet is managed by the provider, in which case this is set on the public subnet where the NAT gateway resides. It is then used to determine routes for private subnets in the same AZ as the public subnet."', args=[d.arg(name='natGatewayId', type=d.T.string)]),
        withNatGatewayId(natGatewayId): { natGatewayId: natGatewayId },
        '#withParentZoneName':: d.fn(help="\"ParentZoneName is the zone name where the current subnet's zone is tied when\\nthe zone is a Local Zone.\\n\\nThe subnets in Local Zone or Wavelength Zone locations consume the ParentZoneName\\nto select the correct private route table to egress traffic to the internet.\"", args=[d.arg(name='parentZoneName', type=d.T.string)]),
        withParentZoneName(parentZoneName): { parentZoneName: parentZoneName },
        '#withResourceID':: d.fn(help='"ResourceID is the subnet identifier from AWS, READ ONLY.\\nThis field is populated when the provider manages the subnet."', args=[d.arg(name='resourceID', type=d.T.string)]),
        withResourceID(resourceID): { resourceID: resourceID },
        '#withRouteTableId':: d.fn(help='"RouteTableID is the routing table id associated with the subnet."', args=[d.arg(name='routeTableId', type=d.T.string)]),
        withRouteTableId(routeTableId): { routeTableId: routeTableId },
        '#withTags':: d.fn(help='"Tags is a collection of tags describing the resource."', args=[d.arg(name='tags', type=d.T.object)]),
        withTags(tags): { tags: tags },
        '#withTagsMixin':: d.fn(help='"Tags is a collection of tags describing the resource."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.object)]),
        withTagsMixin(tags): { tags+: tags },
        '#withZoneType':: d.fn(help='"ZoneType defines the type of the zone where the subnet is created.\\n\\nThe valid values are availability-zone, local-zone, and wavelength-zone.\\n\\nSubnet with zone type availability-zone (regular) is always selected to create cluster\\nresources, like Load Balancers, NAT Gateways, Contol Plane nodes, etc.\\n\\nSubnet with zone type local-zone or wavelength-zone is not eligible to automatically create\\nregular cluster resources.\\n\\nThe public subnet in availability-zone or local-zone is associated with regular public\\nroute table with default route entry to a Internet Gateway.\\n\\nThe public subnet in wavelength-zone is associated with a carrier public\\nroute table with default route entry to a Carrier Gateway.\\n\\nThe private subnet in the availability-zone is associated with a private route table with\\nthe default route entry to a NAT Gateway created in that zone.\\n\\nThe private subnet in the local-zone or wavelength-zone is associated with a private route table with\\nthe default route entry re-using the NAT Gateway in the Region (preferred from the\\nparent zone, the zone type availability-zone in the region, or first table available)."', args=[d.arg(name='zoneType', type=d.T.string)]),
        withZoneType(zoneType): { zoneType: zoneType },
      },
      '#vpc':: d.obj(help='"VPC configuration."'),
      vpc: {
        '#elasticIpPool':: d.obj(help='"ElasticIPPool contains specific configuration to allocate Public IPv4 address (Elastic IP) from user-defined pool\\nbrought to AWS for core infrastructure resources, like NAT Gateways and Public Network Load Balancers for\\nthe API Server."'),
        elasticIpPool: {
          '#withPublicIpv4Pool':: d.fn(help="\"PublicIpv4Pool sets a custom Public IPv4 Pool used to create Elastic IP address for resources\\ncreated in public IPv4 subnets. Every IPv4 address, Elastic IP, will be allocated from the custom\\nPublic IPv4 pool that you brought to AWS, instead of Amazon-provided pool. The public IPv4 pool\\nresource ID starts with 'ipv4pool-ec2'.\"", args=[d.arg(name='publicIpv4Pool', type=d.T.string)]),
          withPublicIpv4Pool(publicIpv4Pool): { spec+: { network+: { vpc+: { elasticIpPool+: { publicIpv4Pool: publicIpv4Pool } } } } },
          '#withPublicIpv4PoolFallbackOrder':: d.fn(help="\"PublicIpv4PoolFallBackOrder defines the fallback action when the Public IPv4 Pool has been exhausted,\\nno more IPv4 address available in the pool.\\n\\nWhen set to 'amazon-pool', the controller check if the pool has available IPv4 address, when pool has reached the\\nIPv4 limit, the address will be claimed from Amazon-pool (default).\\n\\nWhen set to 'none', the controller will fail the Elastic IP allocation when the publicIpv4Pool is exhausted.\"", args=[d.arg(name='publicIpv4PoolFallbackOrder', type=d.T.string)]),
          withPublicIpv4PoolFallbackOrder(publicIpv4PoolFallbackOrder): { spec+: { network+: { vpc+: { elasticIpPool+: { publicIpv4PoolFallbackOrder: publicIpv4PoolFallbackOrder } } } } },
        },
        '#ipamPool':: d.obj(help='"IPAMPool defines the IPAMv4 pool to be used for VPC.\\nMutually exclusive with CidrBlock."'),
        ipamPool: {
          '#withId':: d.fn(help='"ID is the ID of the IPAM pool this provider should use to create VPC."', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { spec+: { network+: { vpc+: { ipamPool+: { id: id } } } } },
          '#withName':: d.fn(help='"Name is the name of the IPAM pool this provider should use to create VPC."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { network+: { vpc+: { ipamPool+: { name: name } } } } },
          '#withNetmaskLength':: d.fn(help='"The netmask length of the IPv4 CIDR you want to allocate to VPC from\\nan Amazon VPC IP Address Manager (IPAM) pool.\\nDefaults to /16 for IPv4 if not specified."', args=[d.arg(name='netmaskLength', type=d.T.integer)]),
          withNetmaskLength(netmaskLength): { spec+: { network+: { vpc+: { ipamPool+: { netmaskLength: netmaskLength } } } } },
        },
        '#ipv6':: d.obj(help='"IPv6 contains ipv6 specific settings for the network. Supported only in managed clusters.\\nThis field cannot be set on AWSCluster object."'),
        ipv6: {
          '#ipamPool':: d.obj(help='"IPAMPool defines the IPAMv6 pool to be used for VPC.\\nMutually exclusive with CidrBlock."'),
          ipamPool: {
            '#withId':: d.fn(help='"ID is the ID of the IPAM pool this provider should use to create VPC."', args=[d.arg(name='id', type=d.T.string)]),
            withId(id): { spec+: { network+: { vpc+: { ipv6+: { ipamPool+: { id: id } } } } } },
            '#withName':: d.fn(help='"Name is the name of the IPAM pool this provider should use to create VPC."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { network+: { vpc+: { ipv6+: { ipamPool+: { name: name } } } } } },
            '#withNetmaskLength':: d.fn(help='"The netmask length of the IPv4 CIDR you want to allocate to VPC from\\nan Amazon VPC IP Address Manager (IPAM) pool.\\nDefaults to /16 for IPv4 if not specified."', args=[d.arg(name='netmaskLength', type=d.T.integer)]),
            withNetmaskLength(netmaskLength): { spec+: { network+: { vpc+: { ipv6+: { ipamPool+: { netmaskLength: netmaskLength } } } } } },
          },
          '#withCidrBlock':: d.fn(help='"CidrBlock is the CIDR block provided by Amazon when VPC has enabled IPv6.\\nMutually exclusive with IPAMPool."', args=[d.arg(name='cidrBlock', type=d.T.string)]),
          withCidrBlock(cidrBlock): { spec+: { network+: { vpc+: { ipv6+: { cidrBlock: cidrBlock } } } } },
          '#withEgressOnlyInternetGatewayId':: d.fn(help='"EgressOnlyInternetGatewayID is the id of the egress only internet gateway associated with an IPv6 enabled VPC."', args=[d.arg(name='egressOnlyInternetGatewayId', type=d.T.string)]),
          withEgressOnlyInternetGatewayId(egressOnlyInternetGatewayId): { spec+: { network+: { vpc+: { ipv6+: { egressOnlyInternetGatewayId: egressOnlyInternetGatewayId } } } } },
          '#withPoolId':: d.fn(help='"PoolID is the IP pool which must be defined in case of BYO IP is defined.\\nMust be specified if CidrBlock is set.\\nMutually exclusive with IPAMPool."', args=[d.arg(name='poolId', type=d.T.string)]),
          withPoolId(poolId): { spec+: { network+: { vpc+: { ipv6+: { poolId: poolId } } } } },
        },
        '#secondaryCidrBlocks':: d.obj(help='"SecondaryCidrBlocks are additional CIDR blocks to be associated when the provider creates a managed VPC.\\nDefaults to none. Mutually exclusive with IPAMPool. This makes sense to use if, for example, you want to use\\na separate IP range for pods (e.g. Cilium ENI mode)."'),
        secondaryCidrBlocks: {
          '#withIpv4CidrBlock':: d.fn(help='"IPv4CidrBlock is the IPv4 CIDR block to associate with the managed VPC."', args=[d.arg(name='ipv4CidrBlock', type=d.T.string)]),
          withIpv4CidrBlock(ipv4CidrBlock): { ipv4CidrBlock: ipv4CidrBlock },
        },
        '#withAvailabilityZoneSelection':: d.fn(help='"AvailabilityZoneSelection specifies how AZs should be selected if there are more AZs\\nin a region than specified by AvailabilityZoneUsageLimit. There are 2 selection schemes:\\nOrdered - selects based on alphabetical order\\nRandom - selects AZs randomly in a region\\nDefaults to Ordered"', args=[d.arg(name='availabilityZoneSelection', type=d.T.string)]),
        withAvailabilityZoneSelection(availabilityZoneSelection): { spec+: { network+: { vpc+: { availabilityZoneSelection: availabilityZoneSelection } } } },
        '#withAvailabilityZoneUsageLimit':: d.fn(help='"AvailabilityZoneUsageLimit specifies the maximum number of availability zones (AZ) that\\nshould be used in a region when automatically creating subnets. If a region has more\\nthan this number of AZs then this number of AZs will be picked randomly when creating\\ndefault subnets. Defaults to 3"', args=[d.arg(name='availabilityZoneUsageLimit', type=d.T.integer)]),
        withAvailabilityZoneUsageLimit(availabilityZoneUsageLimit): { spec+: { network+: { vpc+: { availabilityZoneUsageLimit: availabilityZoneUsageLimit } } } },
        '#withCarrierGatewayId':: d.fn(help='"CarrierGatewayID is the id of the internet gateway associated with the VPC,\\nfor carrier network (Wavelength Zones)."', args=[d.arg(name='carrierGatewayId', type=d.T.string)]),
        withCarrierGatewayId(carrierGatewayId): { spec+: { network+: { vpc+: { carrierGatewayId: carrierGatewayId } } } },
        '#withCidrBlock':: d.fn(help='"CidrBlock is the CIDR block to be used when the provider creates a managed VPC.\\nDefaults to 10.0.0.0/16.\\nMutually exclusive with IPAMPool."', args=[d.arg(name='cidrBlock', type=d.T.string)]),
        withCidrBlock(cidrBlock): { spec+: { network+: { vpc+: { cidrBlock: cidrBlock } } } },
        '#withEmptyRoutesDefaultVPCSecurityGroup':: d.fn(help="\"EmptyRoutesDefaultVPCSecurityGroup specifies whether the default VPC security group ingress\\nand egress rules should be removed.\\n\\nBy default, when creating a VPC, AWS creates a security group called `default` with ingress and egress\\nrules that allow traffic from anywhere. The group could be used as a potential surface attack and\\nit's generally suggested that the group rules are removed or modified appropriately.\\n\\nNOTE: This only applies when the VPC is managed by the Cluster API AWS controller.\"", args=[d.arg(name='emptyRoutesDefaultVPCSecurityGroup', type=d.T.boolean)]),
        withEmptyRoutesDefaultVPCSecurityGroup(emptyRoutesDefaultVPCSecurityGroup): { spec+: { network+: { vpc+: { emptyRoutesDefaultVPCSecurityGroup: emptyRoutesDefaultVPCSecurityGroup } } } },
        '#withId':: d.fn(help='"ID is the vpc-id of the VPC this provider should use to create resources."', args=[d.arg(name='id', type=d.T.string)]),
        withId(id): { spec+: { network+: { vpc+: { id: id } } } },
        '#withInternetGatewayId':: d.fn(help='"InternetGatewayID is the id of the internet gateway associated with the VPC."', args=[d.arg(name='internetGatewayId', type=d.T.string)]),
        withInternetGatewayId(internetGatewayId): { spec+: { network+: { vpc+: { internetGatewayId: internetGatewayId } } } },
        '#withPrivateDnsHostnameTypeOnLaunch':: d.fn(help='"PrivateDNSHostnameTypeOnLaunch is the type of hostname to assign to instances in the subnet at launch.\\nFor IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name)\\nor the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name)."', args=[d.arg(name='privateDnsHostnameTypeOnLaunch', type=d.T.string)]),
        withPrivateDnsHostnameTypeOnLaunch(privateDnsHostnameTypeOnLaunch): { spec+: { network+: { vpc+: { privateDnsHostnameTypeOnLaunch: privateDnsHostnameTypeOnLaunch } } } },
        '#withSecondaryCidrBlocks':: d.fn(help='"SecondaryCidrBlocks are additional CIDR blocks to be associated when the provider creates a managed VPC.\\nDefaults to none. Mutually exclusive with IPAMPool. This makes sense to use if, for example, you want to use\\na separate IP range for pods (e.g. Cilium ENI mode)."', args=[d.arg(name='secondaryCidrBlocks', type=d.T.array)]),
        withSecondaryCidrBlocks(secondaryCidrBlocks): { spec+: { network+: { vpc+: { secondaryCidrBlocks: if std.isArray(v=secondaryCidrBlocks) then secondaryCidrBlocks else [secondaryCidrBlocks] } } } },
        '#withSecondaryCidrBlocksMixin':: d.fn(help='"SecondaryCidrBlocks are additional CIDR blocks to be associated when the provider creates a managed VPC.\\nDefaults to none. Mutually exclusive with IPAMPool. This makes sense to use if, for example, you want to use\\na separate IP range for pods (e.g. Cilium ENI mode)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='secondaryCidrBlocks', type=d.T.array)]),
        withSecondaryCidrBlocksMixin(secondaryCidrBlocks): { spec+: { network+: { vpc+: { secondaryCidrBlocks+: if std.isArray(v=secondaryCidrBlocks) then secondaryCidrBlocks else [secondaryCidrBlocks] } } } },
        '#withSubnetSchema':: d.fn(help='"SubnetSchema specifies how CidrBlock should be divided on subnets in the VPC depending on the number of AZs.\\nPreferPrivate - one private subnet for each AZ plus one other subnet that will be further sub-divided for the public subnets.\\nPreferPublic - have the reverse logic of PreferPrivate, one public subnet for each AZ plus one other subnet\\nthat will be further sub-divided for the private subnets.\\nDefaults to PreferPrivate"', args=[d.arg(name='subnetSchema', type=d.T.string)]),
        withSubnetSchema(subnetSchema): { spec+: { network+: { vpc+: { subnetSchema: subnetSchema } } } },
        '#withTags':: d.fn(help='"Tags is a collection of tags describing the resource."', args=[d.arg(name='tags', type=d.T.object)]),
        withTags(tags): { spec+: { network+: { vpc+: { tags: tags } } } },
        '#withTagsMixin':: d.fn(help='"Tags is a collection of tags describing the resource."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.object)]),
        withTagsMixin(tags): { spec+: { network+: { vpc+: { tags+: tags } } } },
      },
      '#withAdditionalControlPlaneIngressRules':: d.fn(help='"AdditionalControlPlaneIngressRules is an optional set of ingress rules to add to the control plane"', args=[d.arg(name='additionalControlPlaneIngressRules', type=d.T.array)]),
      withAdditionalControlPlaneIngressRules(additionalControlPlaneIngressRules): { spec+: { network+: { additionalControlPlaneIngressRules: if std.isArray(v=additionalControlPlaneIngressRules) then additionalControlPlaneIngressRules else [additionalControlPlaneIngressRules] } } },
      '#withAdditionalControlPlaneIngressRulesMixin':: d.fn(help='"AdditionalControlPlaneIngressRules is an optional set of ingress rules to add to the control plane"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='additionalControlPlaneIngressRules', type=d.T.array)]),
      withAdditionalControlPlaneIngressRulesMixin(additionalControlPlaneIngressRules): { spec+: { network+: { additionalControlPlaneIngressRules+: if std.isArray(v=additionalControlPlaneIngressRules) then additionalControlPlaneIngressRules else [additionalControlPlaneIngressRules] } } },
      '#withNodePortIngressRuleCidrBlocks':: d.fn(help="\"NodePortIngressRuleCidrBlocks is an optional set of CIDR blocks to allow traffic to nodes' NodePort services.\\nIf none are specified here, all IPs are allowed to connect.\"", args=[d.arg(name='nodePortIngressRuleCidrBlocks', type=d.T.array)]),
      withNodePortIngressRuleCidrBlocks(nodePortIngressRuleCidrBlocks): { spec+: { network+: { nodePortIngressRuleCidrBlocks: if std.isArray(v=nodePortIngressRuleCidrBlocks) then nodePortIngressRuleCidrBlocks else [nodePortIngressRuleCidrBlocks] } } },
      '#withNodePortIngressRuleCidrBlocksMixin':: d.fn(help="\"NodePortIngressRuleCidrBlocks is an optional set of CIDR blocks to allow traffic to nodes' NodePort services.\\nIf none are specified here, all IPs are allowed to connect.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='nodePortIngressRuleCidrBlocks', type=d.T.array)]),
      withNodePortIngressRuleCidrBlocksMixin(nodePortIngressRuleCidrBlocks): { spec+: { network+: { nodePortIngressRuleCidrBlocks+: if std.isArray(v=nodePortIngressRuleCidrBlocks) then nodePortIngressRuleCidrBlocks else [nodePortIngressRuleCidrBlocks] } } },
      '#withSecurityGroupOverrides':: d.fn(help='"SecurityGroupOverrides is an optional set of security groups to use for cluster instances\\nThis is optional - if not provided new security groups will be created for the cluster"', args=[d.arg(name='securityGroupOverrides', type=d.T.object)]),
      withSecurityGroupOverrides(securityGroupOverrides): { spec+: { network+: { securityGroupOverrides: securityGroupOverrides } } },
      '#withSecurityGroupOverridesMixin':: d.fn(help='"SecurityGroupOverrides is an optional set of security groups to use for cluster instances\\nThis is optional - if not provided new security groups will be created for the cluster"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='securityGroupOverrides', type=d.T.object)]),
      withSecurityGroupOverridesMixin(securityGroupOverrides): { spec+: { network+: { securityGroupOverrides+: securityGroupOverrides } } },
      '#withSubnets':: d.fn(help='"Subnets configuration."', args=[d.arg(name='subnets', type=d.T.array)]),
      withSubnets(subnets): { spec+: { network+: { subnets: if std.isArray(v=subnets) then subnets else [subnets] } } },
      '#withSubnetsMixin':: d.fn(help='"Subnets configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subnets', type=d.T.array)]),
      withSubnetsMixin(subnets): { spec+: { network+: { subnets+: if std.isArray(v=subnets) then subnets else [subnets] } } },
    },
    '#oidcIdentityProviderConfig':: d.obj(help='"IdentityProviderconfig is used to specify the oidc provider config\\nto be attached with this eks cluster"'),
    oidcIdentityProviderConfig: {
      '#withClientId':: d.fn(help='"This is also known as audience. The ID for the client application that makes\\nauthentication requests to the OpenID identity provider."', args=[d.arg(name='clientId', type=d.T.string)]),
      withClientId(clientId): { spec+: { oidcIdentityProviderConfig+: { clientId: clientId } } },
      '#withGroupsClaim':: d.fn(help='"The JWT claim that the provider uses to return your groups."', args=[d.arg(name='groupsClaim', type=d.T.string)]),
      withGroupsClaim(groupsClaim): { spec+: { oidcIdentityProviderConfig+: { groupsClaim: groupsClaim } } },
      '#withGroupsPrefix':: d.fn(help='"The prefix that is prepended to group claims to prevent clashes with existing\\nnames (such as system: groups). For example, the valueoidc: will create group\\nnames like oidc:engineering and oidc:infra."', args=[d.arg(name='groupsPrefix', type=d.T.string)]),
      withGroupsPrefix(groupsPrefix): { spec+: { oidcIdentityProviderConfig+: { groupsPrefix: groupsPrefix } } },
      '#withIdentityProviderConfigName':: d.fn(help='"The name of the OIDC provider configuration.\\n\\nIdentityProviderConfigName is a required field"', args=[d.arg(name='identityProviderConfigName', type=d.T.string)]),
      withIdentityProviderConfigName(identityProviderConfigName): { spec+: { oidcIdentityProviderConfig+: { identityProviderConfigName: identityProviderConfigName } } },
      '#withIssuerUrl':: d.fn(help="\"The URL of the OpenID identity provider that allows the API server to discover\\npublic signing keys for verifying tokens. The URL must begin with https://\\nand should correspond to the iss claim in the provider's OIDC ID tokens.\\nPer the OIDC standard, path components are allowed but query parameters are\\nnot. Typically the URL consists of only a hostname, like https://server.example.org\\nor https://example.com. This URL should point to the level below .well-known/openid-configuration\\nand must be publicly accessible over the internet.\"", args=[d.arg(name='issuerUrl', type=d.T.string)]),
      withIssuerUrl(issuerUrl): { spec+: { oidcIdentityProviderConfig+: { issuerUrl: issuerUrl } } },
      '#withRequiredClaims':: d.fn(help='"The key value pairs that describe required claims in the identity token.\\nIf set, each claim is verified to be present in the token with a matching\\nvalue. For the maximum number of claims that you can require, see Amazon\\nEKS service quotas (https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html)\\nin the Amazon EKS User Guide."', args=[d.arg(name='requiredClaims', type=d.T.object)]),
      withRequiredClaims(requiredClaims): { spec+: { oidcIdentityProviderConfig+: { requiredClaims: requiredClaims } } },
      '#withRequiredClaimsMixin':: d.fn(help='"The key value pairs that describe required claims in the identity token.\\nIf set, each claim is verified to be present in the token with a matching\\nvalue. For the maximum number of claims that you can require, see Amazon\\nEKS service quotas (https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html)\\nin the Amazon EKS User Guide."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredClaims', type=d.T.object)]),
      withRequiredClaimsMixin(requiredClaims): { spec+: { oidcIdentityProviderConfig+: { requiredClaims+: requiredClaims } } },
      '#withTags':: d.fn(help='"tags to apply to oidc identity provider association"', args=[d.arg(name='tags', type=d.T.object)]),
      withTags(tags): { spec+: { oidcIdentityProviderConfig+: { tags: tags } } },
      '#withTagsMixin':: d.fn(help='"tags to apply to oidc identity provider association"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.object)]),
      withTagsMixin(tags): { spec+: { oidcIdentityProviderConfig+: { tags+: tags } } },
      '#withUsernameClaim':: d.fn(help='"The JSON Web Token (JWT) claim to use as the username. The default is sub,\\nwhich is expected to be a unique identifier of the end user. You can choose\\nother claims, such as email or name, depending on the OpenID identity provider.\\nClaims other than email are prefixed with the issuer URL to prevent naming\\nclashes with other plug-ins."', args=[d.arg(name='usernameClaim', type=d.T.string)]),
      withUsernameClaim(usernameClaim): { spec+: { oidcIdentityProviderConfig+: { usernameClaim: usernameClaim } } },
      '#withUsernamePrefix':: d.fn(help='"The prefix that is prepended to username claims to prevent clashes with existing\\nnames. If you do not provide this field, and username is a value other than\\nemail, the prefix defaults to issuerurl#. You can use the value - to disable\\nall prefixing."', args=[d.arg(name='usernamePrefix', type=d.T.string)]),
      withUsernamePrefix(usernamePrefix): { spec+: { oidcIdentityProviderConfig+: { usernamePrefix: usernamePrefix } } },
    },
    '#vpcCni':: d.obj(help='"VpcCni is used to set configuration options for the VPC CNI plugin"'),
    vpcCni: {
      '#env':: d.obj(help='"Env defines a list of environment variables to apply to the `aws-node` DaemonSet"'),
      env: {
        '#valueFrom':: d.obj(help="\"Source for the environment variable's value. Cannot be used if value is not empty.\""),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='"Selects a key of a ConfigMap."'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
          },
          '#fieldRef':: d.obj(help="\"Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\""),
          fieldRef: {
            '#withApiVersion':: d.fn(help='"Version of the schema the FieldPath is written in terms of, defaults to \\"v1\\"."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
            '#withFieldPath':: d.fn(help='"Path of the field to select in the specified API version."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
          },
          '#resourceFieldRef':: d.obj(help='"Selects a resource of the container: only resources limits and requests\\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."'),
          resourceFieldRef: {
            '#withContainerName':: d.fn(help='"Container name: required for volumes, optional for env vars"', args=[d.arg(name='containerName', type=d.T.string)]),
            withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
            '#withDivisor':: d.fn(help='"Specifies the output format of the exposed resources, defaults to \\"1\\', args=[d.arg(name='divisor', type=d.T.any)]),
            withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
            '#withResource':: d.fn(help='"Required: resource to select"', args=[d.arg(name='resource', type=d.T.string)]),
            withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
          },
          '#secretKeyRef':: d.obj(help="\"Selects a key of a secret in the pod's namespace\""),
          secretKeyRef: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
          },
        },
        '#withName':: d.fn(help='"Name of the environment variable. Must be a C_IDENTIFIER."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='"Variable references $(VAR_NAME) are expanded\\nusing the previously defined environment variables in the container and\\nany service environment variables. If a variable cannot be resolved,\\nthe reference in the input string will be unchanged. Double $$ are reduced\\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\\n\\"$$(VAR_NAME)\\" will produce the string literal \\"$(VAR_NAME)\\".\\nEscaped references will never be expanded, regardless of whether the variable\\nexists or not.\\nDefaults to \\"\\"."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withEnv':: d.fn(help='"Env defines a list of environment variables to apply to the `aws-node` DaemonSet"', args=[d.arg(name='env', type=d.T.array)]),
      withEnv(env): { spec+: { vpcCni+: { env: if std.isArray(v=env) then env else [env] } } },
      '#withEnvMixin':: d.fn(help='"Env defines a list of environment variables to apply to the `aws-node` DaemonSet"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
      withEnvMixin(env): { spec+: { vpcCni+: { env+: if std.isArray(v=env) then env else [env] } } },
    },
    '#withAdditionalTags':: d.fn(help='"AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the\\nones added by default."', args=[d.arg(name='additionalTags', type=d.T.object)]),
    withAdditionalTags(additionalTags): { spec+: { additionalTags: additionalTags } },
    '#withAdditionalTagsMixin':: d.fn(help='"AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the\\nones added by default."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='additionalTags', type=d.T.object)]),
    withAdditionalTagsMixin(additionalTags): { spec+: { additionalTags+: additionalTags } },
    '#withAddons':: d.fn(help='"Addons defines the EKS addons to enable with the EKS cluster."', args=[d.arg(name='addons', type=d.T.array)]),
    withAddons(addons): { spec+: { addons: if std.isArray(v=addons) then addons else [addons] } },
    '#withAddonsMixin':: d.fn(help='"Addons defines the EKS addons to enable with the EKS cluster."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='addons', type=d.T.array)]),
    withAddonsMixin(addons): { spec+: { addons+: if std.isArray(v=addons) then addons else [addons] } },
    '#withAssociateOIDCProvider':: d.fn(help='"AssociateOIDCProvider can be enabled to automatically create an identity\\nprovider for the controller for use with IAM roles for service accounts"', args=[d.arg(name='associateOIDCProvider', type=d.T.boolean)]),
    withAssociateOIDCProvider(associateOIDCProvider): { spec+: { associateOIDCProvider: associateOIDCProvider } },
    '#withDisableVPCCNI':: d.fn(help='"DisableVPCCNI indicates that the Amazon VPC CNI should be disabled. With EKS clusters the\\nAmazon VPC CNI is automatically installed into the cluster. For clusters where you want\\nto use an alternate CNI this option provides a way to specify that the Amazon VPC CNI\\nshould be deleted. You cannot set this to true if you are using the\\nAmazon VPC CNI addon."', args=[d.arg(name='disableVPCCNI', type=d.T.boolean)]),
    withDisableVPCCNI(disableVPCCNI): { spec+: { disableVPCCNI: disableVPCCNI } },
    '#withEksClusterName':: d.fn(help="\"EKSClusterName allows you to specify the name of the EKS cluster in\\nAWS. If you don't specify a name then a default name will be created\\nbased on the namespace and name of the managed control plane.\"", args=[d.arg(name='eksClusterName', type=d.T.string)]),
    withEksClusterName(eksClusterName): { spec+: { eksClusterName: eksClusterName } },
    '#withImageLookupBaseOS':: d.fn(help='"ImageLookupBaseOS is the name of the base operating system used to look\\nup machine images when a machine does not specify an AMI. When set, this\\nwill be used for all cluster machines unless a machine specifies a\\ndifferent ImageLookupBaseOS."', args=[d.arg(name='imageLookupBaseOS', type=d.T.string)]),
    withImageLookupBaseOS(imageLookupBaseOS): { spec+: { imageLookupBaseOS: imageLookupBaseOS } },
    '#withImageLookupFormat':: d.fn(help='"ImageLookupFormat is the AMI naming format to look up machine images when\\na machine does not specify an AMI. When set, this will be used for all\\ncluster machines unless a machine specifies a different ImageLookupOrg.\\nSupports substitutions for {{.BaseOS}} and {{.K8sVersion}} with the base\\nOS and kubernetes version, respectively. The BaseOS will be the value in\\nImageLookupBaseOS or ubuntu (the default), and the kubernetes version as\\ndefined by the packages produced by kubernetes/release without v as a\\nprefix: 1.13.0, 1.12.5-mybuild.1, or 1.17.3. For example, the default\\nimage format of capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-* will end up\\nsearching for AMIs that match the pattern capa-ami-ubuntu-?1.18.0-* for a\\nMachine that is targeting kubernetes v1.18.0 and the ubuntu base OS. See\\nalso: https://golang.org/pkg/text/template/"', args=[d.arg(name='imageLookupFormat', type=d.T.string)]),
    withImageLookupFormat(imageLookupFormat): { spec+: { imageLookupFormat: imageLookupFormat } },
    '#withImageLookupOrg':: d.fn(help='"ImageLookupOrg is the AWS Organization ID to look up machine images when a\\nmachine does not specify an AMI. When set, this will be used for all\\ncluster machines unless a machine specifies a different ImageLookupOrg."', args=[d.arg(name='imageLookupOrg', type=d.T.string)]),
    withImageLookupOrg(imageLookupOrg): { spec+: { imageLookupOrg: imageLookupOrg } },
    '#withRegion':: d.fn(help='"The AWS Region the cluster lives in."', args=[d.arg(name='region', type=d.T.string)]),
    withRegion(region): { spec+: { region: region } },
    '#withRoleAdditionalPolicies':: d.fn(help='"RoleAdditionalPolicies allows you to attach additional polices to\\nthe control plane role. You must enable the EKSAllowAddRoles\\nfeature flag to incorporate these into the created role."', args=[d.arg(name='roleAdditionalPolicies', type=d.T.array)]),
    withRoleAdditionalPolicies(roleAdditionalPolicies): { spec+: { roleAdditionalPolicies: if std.isArray(v=roleAdditionalPolicies) then roleAdditionalPolicies else [roleAdditionalPolicies] } },
    '#withRoleAdditionalPoliciesMixin':: d.fn(help='"RoleAdditionalPolicies allows you to attach additional polices to\\nthe control plane role. You must enable the EKSAllowAddRoles\\nfeature flag to incorporate these into the created role."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roleAdditionalPolicies', type=d.T.array)]),
    withRoleAdditionalPoliciesMixin(roleAdditionalPolicies): { spec+: { roleAdditionalPolicies+: if std.isArray(v=roleAdditionalPolicies) then roleAdditionalPolicies else [roleAdditionalPolicies] } },
    '#withRoleName':: d.fn(help='"RoleName specifies the name of IAM role that gives EKS\\npermission to make API calls. If the role is pre-existing\\nwe will treat it as unmanaged and not delete it on\\ndeletion. If the EKSEnableIAM feature flag is true\\nand no name is supplied then a role is created."', args=[d.arg(name='roleName', type=d.T.string)]),
    withRoleName(roleName): { spec+: { roleName: roleName } },
    '#withSecondaryCidrBlock':: d.fn(help='"SecondaryCidrBlock is the additional CIDR range to use for pod IPs.\\nMust be within the 100.64.0.0/10 or 198.19.0.0/16 range."', args=[d.arg(name='secondaryCidrBlock', type=d.T.string)]),
    withSecondaryCidrBlock(secondaryCidrBlock): { spec+: { secondaryCidrBlock: secondaryCidrBlock } },
    '#withSshKeyName':: d.fn(help='"SSHKeyName is the name of the ssh key to attach to the bastion host. Valid values are empty string (do not use SSH keys), a valid SSH key name, or omitted (use the default SSH key name)"', args=[d.arg(name='sshKeyName', type=d.T.string)]),
    withSshKeyName(sshKeyName): { spec+: { sshKeyName: sshKeyName } },
    '#withTokenMethod':: d.fn(help='"TokenMethod is used to specify the method for obtaining a client token for communicating with EKS\\niam-authenticator - obtains a client token using iam-authentictor\\naws-cli - obtains a client token using the AWS CLI\\nDefaults to iam-authenticator"', args=[d.arg(name='tokenMethod', type=d.T.string)]),
    withTokenMethod(tokenMethod): { spec+: { tokenMethod: tokenMethod } },
    '#withVersion':: d.fn(help='"Version defines the desired Kubernetes version. If no version number\\nis supplied then the latest version of Kubernetes that EKS supports\\nwill be used."', args=[d.arg(name='version', type=d.T.string)]),
    withVersion(version): { spec+: { version: version } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
