{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='awsMachineTemplate', url='', help='"AWSMachineTemplate is the schema for the Amazon EC2 Machine Templates API."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of AWSMachineTemplate', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'infrastructure.cluster.x-k8s.io/v1beta2',
    kind: 'AWSMachineTemplate',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"AWSMachineTemplateSpec defines the desired state of AWSMachineTemplate."'),
  spec: {
    '#template':: d.obj(help='"AWSMachineTemplateResource describes the data needed to create am AWSMachine from a template."'),
    template: {
      '#metadata':: d.obj(help="\"Standard object's metadata.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\""),
      metadata: {
        '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { template+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { template+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { template+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { template+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help='"Spec is the specification of the desired behavior of the machine."'),
      spec: {
        '#additionalSecurityGroups':: d.obj(help='"AdditionalSecurityGroups is an array of references to security groups that should be applied to the\\ninstance. These security groups would be set in addition to any security groups defined\\nat the cluster level or in the actuator. It is possible to specify either IDs of Filters. Using Filters\\nwill cause additional requests to AWS API and if tags change the attached security groups might change too."'),
        additionalSecurityGroups: {
          '#filters':: d.obj(help='"Filters is a set of key/value pairs used to identify a resource\\nThey are applied according to the rules defined by the AWS API:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html"'),
          filters: {
            '#withName':: d.fn(help='"Name of the filter. Filter names are case-sensitive."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValues':: d.fn(help='"Values includes one or more filter values. Filter values are case-sensitive."', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='"Values includes one or more filter values. Filter values are case-sensitive."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withFilters':: d.fn(help='"Filters is a set of key/value pairs used to identify a resource\\nThey are applied according to the rules defined by the AWS API:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html"', args=[d.arg(name='filters', type=d.T.array)]),
          withFilters(filters): { filters: if std.isArray(v=filters) then filters else [filters] },
          '#withFiltersMixin':: d.fn(help='"Filters is a set of key/value pairs used to identify a resource\\nThey are applied according to the rules defined by the AWS API:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
          withFiltersMixin(filters): { filters+: if std.isArray(v=filters) then filters else [filters] },
          '#withId':: d.fn(help='"ID of resource"', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { id: id },
        },
        '#ami':: d.obj(help='"AMI is the reference to the AMI from which to create the machine instance."'),
        ami: {
          '#withEksLookupType':: d.fn(help='"EKSOptimizedLookupType If specified, will look up an EKS Optimized image in SSM Parameter store"', args=[d.arg(name='eksLookupType', type=d.T.string)]),
          withEksLookupType(eksLookupType): { spec+: { template+: { spec+: { ami+: { eksLookupType: eksLookupType } } } } },
          '#withId':: d.fn(help='"ID of resource"', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { spec+: { template+: { spec+: { ami+: { id: id } } } } },
        },
        '#cloudInit':: d.obj(help='"CloudInit defines options related to the bootstrapping systems where\\nCloudInit is used."'),
        cloudInit: {
          '#withInsecureSkipSecretsManager':: d.fn(help='"InsecureSkipSecretsManager, when set to true will not use AWS Secrets Manager\\nor AWS Systems Manager Parameter Store to ensure privacy of userdata.\\nBy default, a cloud-init boothook shell script is prepended to download\\nthe userdata from Secrets Manager and additionally delete the secret."', args=[d.arg(name='insecureSkipSecretsManager', type=d.T.boolean)]),
          withInsecureSkipSecretsManager(insecureSkipSecretsManager): { spec+: { template+: { spec+: { cloudInit+: { insecureSkipSecretsManager: insecureSkipSecretsManager } } } } },
          '#withSecretCount':: d.fn(help='"SecretCount is the number of secrets used to form the complete secret"', args=[d.arg(name='secretCount', type=d.T.integer)]),
          withSecretCount(secretCount): { spec+: { template+: { spec+: { cloudInit+: { secretCount: secretCount } } } } },
          '#withSecretPrefix':: d.fn(help='"SecretPrefix is the prefix for the secret name. This is stored\\ntemporarily, and deleted when the machine registers as a node against\\nthe workload cluster."', args=[d.arg(name='secretPrefix', type=d.T.string)]),
          withSecretPrefix(secretPrefix): { spec+: { template+: { spec+: { cloudInit+: { secretPrefix: secretPrefix } } } } },
          '#withSecureSecretsBackend':: d.fn(help='"SecureSecretsBackend, when set to parameter-store will utilize the AWS Systems Manager\\nParameter Storage to distribute secrets. By default or with the value of secrets-manager,\\nwill use AWS Secrets Manager instead."', args=[d.arg(name='secureSecretsBackend', type=d.T.string)]),
          withSecureSecretsBackend(secureSecretsBackend): { spec+: { template+: { spec+: { cloudInit+: { secureSecretsBackend: secureSecretsBackend } } } } },
        },
        '#elasticIpPool':: d.obj(help='"ElasticIPPool is the configuration to allocate Public IPv4 address (Elastic IP/EIP) from user-defined pool."'),
        elasticIpPool: {
          '#withPublicIpv4Pool':: d.fn(help="\"PublicIpv4Pool sets a custom Public IPv4 Pool used to create Elastic IP address for resources\\ncreated in public IPv4 subnets. Every IPv4 address, Elastic IP, will be allocated from the custom\\nPublic IPv4 pool that you brought to AWS, instead of Amazon-provided pool. The public IPv4 pool\\nresource ID starts with 'ipv4pool-ec2'.\"", args=[d.arg(name='publicIpv4Pool', type=d.T.string)]),
          withPublicIpv4Pool(publicIpv4Pool): { spec+: { template+: { spec+: { elasticIpPool+: { publicIpv4Pool: publicIpv4Pool } } } } },
          '#withPublicIpv4PoolFallbackOrder':: d.fn(help="\"PublicIpv4PoolFallBackOrder defines the fallback action when the Public IPv4 Pool has been exhausted,\\nno more IPv4 address available in the pool.\\n\\nWhen set to 'amazon-pool', the controller check if the pool has available IPv4 address, when pool has reached the\\nIPv4 limit, the address will be claimed from Amazon-pool (default).\\n\\nWhen set to 'none', the controller will fail the Elastic IP allocation when the publicIpv4Pool is exhausted.\"", args=[d.arg(name='publicIpv4PoolFallbackOrder', type=d.T.string)]),
          withPublicIpv4PoolFallbackOrder(publicIpv4PoolFallbackOrder): { spec+: { template+: { spec+: { elasticIpPool+: { publicIpv4PoolFallbackOrder: publicIpv4PoolFallbackOrder } } } } },
        },
        '#ignition':: d.obj(help='"Ignition defined options related to the bootstrapping systems where Ignition is used."'),
        ignition: {
          '#proxy':: d.obj(help='"Proxy defines proxy settings for Ignition.\\nOnly valid for Ignition versions 3.1 and above."'),
          proxy: {
            '#withHttpProxy':: d.fn(help='"HTTPProxy is the HTTP proxy to use for Ignition.\\nA single URL that specifies the proxy server to use for HTTP and HTTPS requests,\\nunless overridden by the HTTPSProxy or NoProxy options."', args=[d.arg(name='httpProxy', type=d.T.string)]),
            withHttpProxy(httpProxy): { spec+: { template+: { spec+: { ignition+: { proxy+: { httpProxy: httpProxy } } } } } },
            '#withHttpsProxy':: d.fn(help='"HTTPSProxy is the HTTPS proxy to use for Ignition.\\nA single URL that specifies the proxy server to use for HTTPS requests,\\nunless overridden by the NoProxy option."', args=[d.arg(name='httpsProxy', type=d.T.string)]),
            withHttpsProxy(httpsProxy): { spec+: { template+: { spec+: { ignition+: { proxy+: { httpsProxy: httpsProxy } } } } } },
            '#withNoProxy':: d.fn(help='"NoProxy is the list of domains to not proxy for Ignition.\\nSpecifies a list of strings to hosts that should be excluded from proxying.\\n\\nEach value is represented by:\\n- An IP address prefix (1.2.3.4)\\n- An IP address prefix in CIDR notation (1.2.3.4/8)\\n- A domain name\\n  - A domain name matches that name and all subdomains\\n  - A domain name with a leading . matches subdomains only\\n- A special DNS label (*), indicates that no proxying should be done\\n\\nAn IP address prefix and domain name can also include a literal port number (1.2.3.4:80)."', args=[d.arg(name='noProxy', type=d.T.array)]),
            withNoProxy(noProxy): { spec+: { template+: { spec+: { ignition+: { proxy+: { noProxy: if std.isArray(v=noProxy) then noProxy else [noProxy] } } } } } },
            '#withNoProxyMixin':: d.fn(help='"NoProxy is the list of domains to not proxy for Ignition.\\nSpecifies a list of strings to hosts that should be excluded from proxying.\\n\\nEach value is represented by:\\n- An IP address prefix (1.2.3.4)\\n- An IP address prefix in CIDR notation (1.2.3.4/8)\\n- A domain name\\n  - A domain name matches that name and all subdomains\\n  - A domain name with a leading . matches subdomains only\\n- A special DNS label (*), indicates that no proxying should be done\\n\\nAn IP address prefix and domain name can also include a literal port number (1.2.3.4:80)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='noProxy', type=d.T.array)]),
            withNoProxyMixin(noProxy): { spec+: { template+: { spec+: { ignition+: { proxy+: { noProxy+: if std.isArray(v=noProxy) then noProxy else [noProxy] } } } } } },
          },
          '#tls':: d.obj(help='"TLS defines TLS settings for Ignition.\\nOnly valid for Ignition versions 3.1 and above."'),
          tls: {
            '#withCertificateAuthorities':: d.fn(help='"CASources defines the list of certificate authorities to use for Ignition.\\nThe value is the certificate bundle (in PEM format). The bundle can contain multiple concatenated certificates.\\nSupported schemes are http, https, tftp, s3, arn, gs, and `data` (RFC 2397) URL scheme."', args=[d.arg(name='certificateAuthorities', type=d.T.array)]),
            withCertificateAuthorities(certificateAuthorities): { spec+: { template+: { spec+: { ignition+: { tls+: { certificateAuthorities: if std.isArray(v=certificateAuthorities) then certificateAuthorities else [certificateAuthorities] } } } } } },
            '#withCertificateAuthoritiesMixin':: d.fn(help='"CASources defines the list of certificate authorities to use for Ignition.\\nThe value is the certificate bundle (in PEM format). The bundle can contain multiple concatenated certificates.\\nSupported schemes are http, https, tftp, s3, arn, gs, and `data` (RFC 2397) URL scheme."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificateAuthorities', type=d.T.array)]),
            withCertificateAuthoritiesMixin(certificateAuthorities): { spec+: { template+: { spec+: { ignition+: { tls+: { certificateAuthorities+: if std.isArray(v=certificateAuthorities) then certificateAuthorities else [certificateAuthorities] } } } } } },
          },
          '#withStorageType':: d.fn(help='"StorageType defines how to store the boostrap user data for Ignition.\\nThis can be used to instruct Ignition from where to fetch the user data to bootstrap an instance.\\n\\nWhen omitted, the storage option will default to ClusterObjectStore.\\n\\nWhen set to \\"ClusterObjectStore\\", if the capability is available and a Cluster ObjectStore configuration\\nis correctly provided in the Cluster object (under .spec.s3Bucket),\\nan object store will be used to store bootstrap user data.\\n\\nWhen set to \\"UnencryptedUserData\\", EC2 Instance User Data will be used to store the machine bootstrap user data, unencrypted.\\nThis option is considered less secure than others as user data may contain sensitive informations (keys, certificates, etc.)\\nand users with ec2:DescribeInstances permission or users running pods\\nthat can access the ec2 metadata service have access to this sensitive information.\\nSo this is only to be used at ones own risk, and only when other more secure options are not viable."', args=[d.arg(name='storageType', type=d.T.string)]),
          withStorageType(storageType): { spec+: { template+: { spec+: { ignition+: { storageType: storageType } } } } },
          '#withVersion':: d.fn(help='"Version defines which version of Ignition will be used to generate bootstrap data."', args=[d.arg(name='version', type=d.T.string)]),
          withVersion(version): { spec+: { template+: { spec+: { ignition+: { version: version } } } } },
        },
        '#instanceMetadataOptions':: d.obj(help='"InstanceMetadataOptions is the metadata options for the EC2 instance."'),
        instanceMetadataOptions: {
          '#withHttpEndpoint':: d.fn(help='"Enables or disables the HTTP metadata endpoint on your instances.\\n\\nIf you specify a value of disabled, you cannot access your instance metadata.\\n\\nDefault: enabled"', args=[d.arg(name='httpEndpoint', type=d.T.string)]),
          withHttpEndpoint(httpEndpoint): { spec+: { template+: { spec+: { instanceMetadataOptions+: { httpEndpoint: httpEndpoint } } } } },
          '#withHttpPutResponseHopLimit':: d.fn(help='"The desired HTTP PUT response hop limit for instance metadata requests. The\\nlarger the number, the further instance metadata requests can travel.\\n\\nDefault: 1"', args=[d.arg(name='httpPutResponseHopLimit', type=d.T.integer)]),
          withHttpPutResponseHopLimit(httpPutResponseHopLimit): { spec+: { template+: { spec+: { instanceMetadataOptions+: { httpPutResponseHopLimit: httpPutResponseHopLimit } } } } },
          '#withHttpTokens':: d.fn(help='"The state of token usage for your instance metadata requests.\\n\\nIf the state is optional, you can choose to retrieve instance metadata with\\nor without a session token on your request. If you retrieve the IAM role\\ncredentials without a token, the version 1.0 role credentials are returned.\\nIf you retrieve the IAM role credentials using a valid session token, the\\nversion 2.0 role credentials are returned.\\n\\nIf the state is required, you must send a session token with any instance\\nmetadata retrieval requests. In this state, retrieving the IAM role credentials\\nalways returns the version 2.0 credentials; the version 1.0 credentials are\\nnot available.\\n\\nDefault: optional"', args=[d.arg(name='httpTokens', type=d.T.string)]),
          withHttpTokens(httpTokens): { spec+: { template+: { spec+: { instanceMetadataOptions+: { httpTokens: httpTokens } } } } },
          '#withInstanceMetadataTags':: d.fn(help='"Set to enabled to allow access to instance tags from the instance metadata.\\nSet to disabled to turn off access to instance tags from the instance metadata.\\nFor more information, see Work with instance tags using the instance metadata\\n(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS).\\n\\nDefault: disabled"', args=[d.arg(name='instanceMetadataTags', type=d.T.string)]),
          withInstanceMetadataTags(instanceMetadataTags): { spec+: { template+: { spec+: { instanceMetadataOptions+: { instanceMetadataTags: instanceMetadataTags } } } } },
        },
        '#nonRootVolumes':: d.obj(help='"Configuration options for the non root storage volumes."'),
        nonRootVolumes: {
          '#withDeviceName':: d.fn(help='"Device name"', args=[d.arg(name='deviceName', type=d.T.string)]),
          withDeviceName(deviceName): { deviceName: deviceName },
          '#withEncrypted':: d.fn(help='"Encrypted is whether the volume should be encrypted or not."', args=[d.arg(name='encrypted', type=d.T.boolean)]),
          withEncrypted(encrypted): { encrypted: encrypted },
          '#withEncryptionKey':: d.fn(help='"EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN.\\nIf Encrypted is set and this is omitted, the default AWS key will be used.\\nThe key must already exist and be accessible by the controller."', args=[d.arg(name='encryptionKey', type=d.T.string)]),
          withEncryptionKey(encryptionKey): { encryptionKey: encryptionKey },
          '#withIops':: d.fn(help='"IOPS is the number of IOPS requested for the disk. Not applicable to all types."', args=[d.arg(name='iops', type=d.T.integer)]),
          withIops(iops): { iops: iops },
          '#withSize':: d.fn(help='"Size specifies size (in Gi) of the storage device.\\nMust be greater than the image snapshot size or 8 (whichever is greater)."', args=[d.arg(name='size', type=d.T.integer)]),
          withSize(size): { size: size },
          '#withThroughput':: d.fn(help='"Throughput to provision in MiB/s supported for the volume type. Not applicable to all types."', args=[d.arg(name='throughput', type=d.T.integer)]),
          withThroughput(throughput): { throughput: throughput },
          '#withType':: d.fn(help='"Type is the type of the volume (e.g. gp2, io1, etc...)."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#privateDnsName':: d.obj(help='"PrivateDNSName is the options for the instance hostname."'),
        privateDnsName: {
          '#withEnableResourceNameDnsAAAARecord':: d.fn(help='"EnableResourceNameDNSAAAARecord indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records."', args=[d.arg(name='enableResourceNameDnsAAAARecord', type=d.T.boolean)]),
          withEnableResourceNameDnsAAAARecord(enableResourceNameDnsAAAARecord): { spec+: { template+: { spec+: { privateDnsName+: { enableResourceNameDnsAAAARecord: enableResourceNameDnsAAAARecord } } } } },
          '#withEnableResourceNameDnsARecord':: d.fn(help='"EnableResourceNameDNSARecord indicates whether to respond to DNS queries for instance hostnames with DNS A records."', args=[d.arg(name='enableResourceNameDnsARecord', type=d.T.boolean)]),
          withEnableResourceNameDnsARecord(enableResourceNameDnsARecord): { spec+: { template+: { spec+: { privateDnsName+: { enableResourceNameDnsARecord: enableResourceNameDnsARecord } } } } },
          '#withHostnameType':: d.fn(help='"The type of hostname to assign to an instance."', args=[d.arg(name='hostnameType', type=d.T.string)]),
          withHostnameType(hostnameType): { spec+: { template+: { spec+: { privateDnsName+: { hostnameType: hostnameType } } } } },
        },
        '#rootVolume':: d.obj(help='"RootVolume encapsulates the configuration options for the root volume"'),
        rootVolume: {
          '#withDeviceName':: d.fn(help='"Device name"', args=[d.arg(name='deviceName', type=d.T.string)]),
          withDeviceName(deviceName): { spec+: { template+: { spec+: { rootVolume+: { deviceName: deviceName } } } } },
          '#withEncrypted':: d.fn(help='"Encrypted is whether the volume should be encrypted or not."', args=[d.arg(name='encrypted', type=d.T.boolean)]),
          withEncrypted(encrypted): { spec+: { template+: { spec+: { rootVolume+: { encrypted: encrypted } } } } },
          '#withEncryptionKey':: d.fn(help='"EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN.\\nIf Encrypted is set and this is omitted, the default AWS key will be used.\\nThe key must already exist and be accessible by the controller."', args=[d.arg(name='encryptionKey', type=d.T.string)]),
          withEncryptionKey(encryptionKey): { spec+: { template+: { spec+: { rootVolume+: { encryptionKey: encryptionKey } } } } },
          '#withIops':: d.fn(help='"IOPS is the number of IOPS requested for the disk. Not applicable to all types."', args=[d.arg(name='iops', type=d.T.integer)]),
          withIops(iops): { spec+: { template+: { spec+: { rootVolume+: { iops: iops } } } } },
          '#withSize':: d.fn(help='"Size specifies size (in Gi) of the storage device.\\nMust be greater than the image snapshot size or 8 (whichever is greater)."', args=[d.arg(name='size', type=d.T.integer)]),
          withSize(size): { spec+: { template+: { spec+: { rootVolume+: { size: size } } } } },
          '#withThroughput':: d.fn(help='"Throughput to provision in MiB/s supported for the volume type. Not applicable to all types."', args=[d.arg(name='throughput', type=d.T.integer)]),
          withThroughput(throughput): { spec+: { template+: { spec+: { rootVolume+: { throughput: throughput } } } } },
          '#withType':: d.fn(help='"Type is the type of the volume (e.g. gp2, io1, etc...)."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { template+: { spec+: { rootVolume+: { type: type } } } } },
        },
        '#spotMarketOptions':: d.obj(help='"SpotMarketOptions allows users to configure instances to be run using AWS Spot instances."'),
        spotMarketOptions: {
          '#withMaxPrice':: d.fn(help='"MaxPrice defines the maximum price the user is willing to pay for Spot VM instances"', args=[d.arg(name='maxPrice', type=d.T.string)]),
          withMaxPrice(maxPrice): { spec+: { template+: { spec+: { spotMarketOptions+: { maxPrice: maxPrice } } } } },
        },
        '#subnet':: d.obj(help='"Subnet is a reference to the subnet to use for this instance. If not specified,\\nthe cluster subnet will be used."'),
        subnet: {
          '#filters':: d.obj(help='"Filters is a set of key/value pairs used to identify a resource\\nThey are applied according to the rules defined by the AWS API:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html"'),
          filters: {
            '#withName':: d.fn(help='"Name of the filter. Filter names are case-sensitive."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValues':: d.fn(help='"Values includes one or more filter values. Filter values are case-sensitive."', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='"Values includes one or more filter values. Filter values are case-sensitive."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withFilters':: d.fn(help='"Filters is a set of key/value pairs used to identify a resource\\nThey are applied according to the rules defined by the AWS API:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html"', args=[d.arg(name='filters', type=d.T.array)]),
          withFilters(filters): { spec+: { template+: { spec+: { subnet+: { filters: if std.isArray(v=filters) then filters else [filters] } } } } },
          '#withFiltersMixin':: d.fn(help='"Filters is a set of key/value pairs used to identify a resource\\nThey are applied according to the rules defined by the AWS API:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
          withFiltersMixin(filters): { spec+: { template+: { spec+: { subnet+: { filters+: if std.isArray(v=filters) then filters else [filters] } } } } },
          '#withId':: d.fn(help='"ID of resource"', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { spec+: { template+: { spec+: { subnet+: { id: id } } } } },
        },
        '#withAdditionalSecurityGroups':: d.fn(help='"AdditionalSecurityGroups is an array of references to security groups that should be applied to the\\ninstance. These security groups would be set in addition to any security groups defined\\nat the cluster level or in the actuator. It is possible to specify either IDs of Filters. Using Filters\\nwill cause additional requests to AWS API and if tags change the attached security groups might change too."', args=[d.arg(name='additionalSecurityGroups', type=d.T.array)]),
        withAdditionalSecurityGroups(additionalSecurityGroups): { spec+: { template+: { spec+: { additionalSecurityGroups: if std.isArray(v=additionalSecurityGroups) then additionalSecurityGroups else [additionalSecurityGroups] } } } },
        '#withAdditionalSecurityGroupsMixin':: d.fn(help='"AdditionalSecurityGroups is an array of references to security groups that should be applied to the\\ninstance. These security groups would be set in addition to any security groups defined\\nat the cluster level or in the actuator. It is possible to specify either IDs of Filters. Using Filters\\nwill cause additional requests to AWS API and if tags change the attached security groups might change too."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='additionalSecurityGroups', type=d.T.array)]),
        withAdditionalSecurityGroupsMixin(additionalSecurityGroups): { spec+: { template+: { spec+: { additionalSecurityGroups+: if std.isArray(v=additionalSecurityGroups) then additionalSecurityGroups else [additionalSecurityGroups] } } } },
        '#withAdditionalTags':: d.fn(help="\"AdditionalTags is an optional set of tags to add to an instance, in addition to the ones added by default by the\\nAWS provider. If both the AWSCluster and the AWSMachine specify the same tag name with different values, the\\nAWSMachine's value takes precedence.\"", args=[d.arg(name='additionalTags', type=d.T.object)]),
        withAdditionalTags(additionalTags): { spec+: { template+: { spec+: { additionalTags: additionalTags } } } },
        '#withAdditionalTagsMixin':: d.fn(help="\"AdditionalTags is an optional set of tags to add to an instance, in addition to the ones added by default by the\\nAWS provider. If both the AWSCluster and the AWSMachine specify the same tag name with different values, the\\nAWSMachine's value takes precedence.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='additionalTags', type=d.T.object)]),
        withAdditionalTagsMixin(additionalTags): { spec+: { template+: { spec+: { additionalTags+: additionalTags } } } },
        '#withCapacityReservationId':: d.fn(help='"CapacityReservationID specifies the target Capacity Reservation into which the instance should be launched."', args=[d.arg(name='capacityReservationId', type=d.T.string)]),
        withCapacityReservationId(capacityReservationId): { spec+: { template+: { spec+: { capacityReservationId: capacityReservationId } } } },
        '#withIamInstanceProfile':: d.fn(help='"IAMInstanceProfile is a name of an IAM instance profile to assign to the instance"', args=[d.arg(name='iamInstanceProfile', type=d.T.string)]),
        withIamInstanceProfile(iamInstanceProfile): { spec+: { template+: { spec+: { iamInstanceProfile: iamInstanceProfile } } } },
        '#withImageLookupBaseOS':: d.fn(help='"ImageLookupBaseOS is the name of the base operating system to use for\\nimage lookup the AMI is not set."', args=[d.arg(name='imageLookupBaseOS', type=d.T.string)]),
        withImageLookupBaseOS(imageLookupBaseOS): { spec+: { template+: { spec+: { imageLookupBaseOS: imageLookupBaseOS } } } },
        '#withImageLookupFormat':: d.fn(help='"ImageLookupFormat is the AMI naming format to look up the image for this\\nmachine It will be ignored if an explicit AMI is set. Supports\\nsubstitutions for {{.BaseOS}} and {{.K8sVersion}} with the base OS and\\nkubernetes version, respectively. The BaseOS will be the value in\\nImageLookupBaseOS or ubuntu (the default), and the kubernetes version as\\ndefined by the packages produced by kubernetes/release without v as a\\nprefix: 1.13.0, 1.12.5-mybuild.1, or 1.17.3. For example, the default\\nimage format of capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-* will end up\\nsearching for AMIs that match the pattern capa-ami-ubuntu-?1.18.0-* for a\\nMachine that is targeting kubernetes v1.18.0 and the ubuntu base OS. See\\nalso: https://golang.org/pkg/text/template/"', args=[d.arg(name='imageLookupFormat', type=d.T.string)]),
        withImageLookupFormat(imageLookupFormat): { spec+: { template+: { spec+: { imageLookupFormat: imageLookupFormat } } } },
        '#withImageLookupOrg':: d.fn(help='"ImageLookupOrg is the AWS Organization ID to use for image lookup if AMI is not set."', args=[d.arg(name='imageLookupOrg', type=d.T.string)]),
        withImageLookupOrg(imageLookupOrg): { spec+: { template+: { spec+: { imageLookupOrg: imageLookupOrg } } } },
        '#withInstanceID':: d.fn(help='"InstanceID is the EC2 instance ID for this machine."', args=[d.arg(name='instanceID', type=d.T.string)]),
        withInstanceID(instanceID): { spec+: { template+: { spec+: { instanceID: instanceID } } } },
        '#withInstanceType':: d.fn(help='"InstanceType is the type of instance to create. Example: m4.xlarge"', args=[d.arg(name='instanceType', type=d.T.string)]),
        withInstanceType(instanceType): { spec+: { template+: { spec+: { instanceType: instanceType } } } },
        '#withMarketType':: d.fn(help='"MarketType specifies the type of market for the EC2 instance. Valid values include:\\n\\"OnDemand\\" (default): The instance runs as a standard OnDemand instance.\\n\\"Spot\\": The instance runs as a Spot instance. When SpotMarketOptions is provided, the marketType defaults to \\"Spot\\".\\n\\"CapacityBlock\\": The instance utilizes pre-purchased compute capacity (capacity blocks) with AWS Capacity Reservations.\\n If this value is selected, CapacityReservationID must be specified to identify the target reservation.\\nIf marketType is not specified and spotMarketOptions is provided, the marketType defaults to \\"Spot\\"."', args=[d.arg(name='marketType', type=d.T.string)]),
        withMarketType(marketType): { spec+: { template+: { spec+: { marketType: marketType } } } },
        '#withNetworkInterfaceType':: d.fn(help='"NetworkInterfaceType is the interface type of the primary network Interface.\\nIf not specified, AWS applies a default value."', args=[d.arg(name='networkInterfaceType', type=d.T.string)]),
        withNetworkInterfaceType(networkInterfaceType): { spec+: { template+: { spec+: { networkInterfaceType: networkInterfaceType } } } },
        '#withNetworkInterfaces':: d.fn(help='"NetworkInterfaces is a list of ENIs to associate with the instance.\\nA maximum of 2 may be specified."', args=[d.arg(name='networkInterfaces', type=d.T.array)]),
        withNetworkInterfaces(networkInterfaces): { spec+: { template+: { spec+: { networkInterfaces: if std.isArray(v=networkInterfaces) then networkInterfaces else [networkInterfaces] } } } },
        '#withNetworkInterfacesMixin':: d.fn(help='"NetworkInterfaces is a list of ENIs to associate with the instance.\\nA maximum of 2 may be specified."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='networkInterfaces', type=d.T.array)]),
        withNetworkInterfacesMixin(networkInterfaces): { spec+: { template+: { spec+: { networkInterfaces+: if std.isArray(v=networkInterfaces) then networkInterfaces else [networkInterfaces] } } } },
        '#withNonRootVolumes':: d.fn(help='"Configuration options for the non root storage volumes."', args=[d.arg(name='nonRootVolumes', type=d.T.array)]),
        withNonRootVolumes(nonRootVolumes): { spec+: { template+: { spec+: { nonRootVolumes: if std.isArray(v=nonRootVolumes) then nonRootVolumes else [nonRootVolumes] } } } },
        '#withNonRootVolumesMixin':: d.fn(help='"Configuration options for the non root storage volumes."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nonRootVolumes', type=d.T.array)]),
        withNonRootVolumesMixin(nonRootVolumes): { spec+: { template+: { spec+: { nonRootVolumes+: if std.isArray(v=nonRootVolumes) then nonRootVolumes else [nonRootVolumes] } } } },
        '#withPlacementGroupName':: d.fn(help='"PlacementGroupName specifies the name of the placement group in which to launch the instance."', args=[d.arg(name='placementGroupName', type=d.T.string)]),
        withPlacementGroupName(placementGroupName): { spec+: { template+: { spec+: { placementGroupName: placementGroupName } } } },
        '#withPlacementGroupPartition':: d.fn(help='"PlacementGroupPartition is the partition number within the placement group in which to launch the instance.\\nThis value is only valid if the placement group, referred in `PlacementGroupName`, was created with\\nstrategy set to partition."', args=[d.arg(name='placementGroupPartition', type=d.T.integer)]),
        withPlacementGroupPartition(placementGroupPartition): { spec+: { template+: { spec+: { placementGroupPartition: placementGroupPartition } } } },
        '#withProviderID':: d.fn(help='"ProviderID is the unique identifier as specified by the cloud provider."', args=[d.arg(name='providerID', type=d.T.string)]),
        withProviderID(providerID): { spec+: { template+: { spec+: { providerID: providerID } } } },
        '#withPublicIP':: d.fn(help='"PublicIP specifies whether the instance should get a public IP.\\nPrecedence for this setting is as follows:\\n1. This field if set\\n2. Cluster/flavor setting\\n3. Subnet default"', args=[d.arg(name='publicIP', type=d.T.boolean)]),
        withPublicIP(publicIP): { spec+: { template+: { spec+: { publicIP: publicIP } } } },
        '#withSecurityGroupOverrides':: d.fn(help='"SecurityGroupOverrides is an optional set of security groups to use for the node.\\nThis is optional - if not provided security groups from the cluster will be used."', args=[d.arg(name='securityGroupOverrides', type=d.T.object)]),
        withSecurityGroupOverrides(securityGroupOverrides): { spec+: { template+: { spec+: { securityGroupOverrides: securityGroupOverrides } } } },
        '#withSecurityGroupOverridesMixin':: d.fn(help='"SecurityGroupOverrides is an optional set of security groups to use for the node.\\nThis is optional - if not provided security groups from the cluster will be used."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='securityGroupOverrides', type=d.T.object)]),
        withSecurityGroupOverridesMixin(securityGroupOverrides): { spec+: { template+: { spec+: { securityGroupOverrides+: securityGroupOverrides } } } },
        '#withSshKeyName':: d.fn(help='"SSHKeyName is the name of the ssh key to attach to the instance. Valid values are empty string (do not use SSH keys), a valid SSH key name, or omitted (use the default SSH key name)"', args=[d.arg(name='sshKeyName', type=d.T.string)]),
        withSshKeyName(sshKeyName): { spec+: { template+: { spec+: { sshKeyName: sshKeyName } } } },
        '#withTenancy':: d.fn(help='"Tenancy indicates if instance should run on shared or single-tenant hardware."', args=[d.arg(name='tenancy', type=d.T.string)]),
        withTenancy(tenancy): { spec+: { template+: { spec+: { tenancy: tenancy } } } },
        '#withUncompressedUserData':: d.fn(help='"UncompressedUserData specify whether the user data is gzip-compressed before it is sent to ec2 instance.\\ncloud-init has built-in support for gzip-compressed user data\\nuser data stored in aws secret manager is always gzip-compressed."', args=[d.arg(name='uncompressedUserData', type=d.T.boolean)]),
        withUncompressedUserData(uncompressedUserData): { spec+: { template+: { spec+: { uncompressedUserData: uncompressedUserData } } } },
      },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
