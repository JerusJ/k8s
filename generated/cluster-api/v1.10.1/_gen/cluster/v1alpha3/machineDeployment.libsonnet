{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='machineDeployment', url='', help='"MachineDeployment is the Schema for the machinedeployments API.\\n\\nDeprecated: This type will be removed in one of the next releases."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of MachineDeployment', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'cluster.x-k8s.io/v1alpha3',
    kind: 'MachineDeployment',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"spec is the desired state of MachineDeployment."'),
  spec: {
    '#selector':: d.obj(help="\"selector is the label selector for machines. Existing MachineSets whose machines are\\nselected by this will be the ones affected by this deployment.\\nIt must match the machine template's labels.\""),
    selector: {
      '#matchExpressions':: d.obj(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."'),
      matchExpressions: {
        '#withKey':: d.fn(help='"key is the label key that the selector applies to."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withValues':: d.fn(help='"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch."', args=[d.arg(name='values', type=d.T.array)]),
        withValues(values): { values: if std.isArray(v=values) then values else [values] },
        '#withValuesMixin':: d.fn(help='"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
      },
      '#withMatchExpressions':: d.fn(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressions(matchExpressions): { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
      '#withMatchExpressionsMixin':: d.fn(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressionsMixin(matchExpressions): { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
      '#withMatchLabels':: d.fn(help='"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\"key\\", the\\noperator is \\"In\\", and the values array contains only \\"value\\". The requirements are ANDed."', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabels(matchLabels): { spec+: { selector+: { matchLabels: matchLabels } } },
      '#withMatchLabelsMixin':: d.fn(help='"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\"key\\", the\\noperator is \\"In\\", and the values array contains only \\"value\\". The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabelsMixin(matchLabels): { spec+: { selector+: { matchLabels+: matchLabels } } },
    },
    '#strategy':: d.obj(help='"strategy is the deployment strategy to use to replace existing machines with\\nnew ones."'),
    strategy: {
      '#rollingUpdate':: d.obj(help='"rollingUpdate is the rolling update config params. Present only if\\nMachineDeploymentStrategyType = RollingUpdate."'),
      rollingUpdate: {
        '#withMaxSurge':: d.fn(help='"maxSurge is the maximum number of machines that can be scheduled above the\\ndesired number of machines.\\nValue can be an absolute number (ex: 5) or a percentage of\\ndesired machines (ex: 10%).\\nThis can not be 0 if MaxUnavailable is 0.\\nAbsolute number is calculated from percentage by rounding up.\\nDefaults to 1.\\nExample: when this is set to 30%, the new MachineSet can be scaled\\nup immediately when the rolling update starts, such that the total\\nnumber of old and new machines do not exceed 130% of desired\\nmachines. Once old machines have been killed, new MachineSet can\\nbe scaled up further, ensuring that total number of machines running\\nat any time during the update is at most 130% of desired machines."', args=[d.arg(name='maxSurge', type=d.T.any)]),
        withMaxSurge(maxSurge): { spec+: { strategy+: { rollingUpdate+: { maxSurge: maxSurge } } } },
        '#withMaxUnavailable':: d.fn(help='"maxUnavailable is the maximum number of machines that can be unavailable during the update.\\nValue can be an absolute number (ex: 5) or a percentage of desired\\nmachines (ex: 10%).\\nAbsolute number is calculated from percentage by rounding down.\\nThis can not be 0 if MaxSurge is 0.\\nDefaults to 0.\\nExample: when this is set to 30%, the old MachineSet can be scaled\\ndown to 70% of desired machines immediately when the rolling update\\nstarts. Once new machines are ready, old MachineSet can be scaled\\ndown further, followed by scaling up the new MachineSet, ensuring\\nthat the total number of machines available at all times\\nduring the update is at least 70% of desired machines."', args=[d.arg(name='maxUnavailable', type=d.T.any)]),
        withMaxUnavailable(maxUnavailable): { spec+: { strategy+: { rollingUpdate+: { maxUnavailable: maxUnavailable } } } },
      },
      '#withType':: d.fn(help='"type of deployment. Currently the only supported strategy is\\n\\"RollingUpdate\\".\\nDefault is RollingUpdate."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { strategy+: { type: type } } },
    },
    '#template':: d.obj(help='"template describes the machines that will be created."'),
    template: {
      '#metadata':: d.obj(help="\"metadata is the standard object's metadata.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\""),
      metadata: {
        '#ownerReferences':: d.obj(help='"ownerReferences is the list of objects depended by this object. If ALL objects in the list have\\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\\nthen an entry in this list will point to this controller, with the controller field set to true.\\nThere cannot be more than one managing controller.\\n\\nDeprecated: This field has no function and is going to be removed in a next release."'),
        ownerReferences: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { apiVersion: apiVersion },
          '#withBlockOwnerDeletion':: d.fn(help='"If true, AND if the owner has the \\"foregroundDeletion\\" finalizer, then\\nthe owner cannot be deleted from the key-value store until this\\nreference is removed.\\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\\nDefaults to false.\\nTo set this field, a user needs \\"delete\\" permission of the owner,\\notherwise 422 (Unprocessable Entity) will be returned."', args=[d.arg(name='blockOwnerDeletion', type=d.T.boolean)]),
          withBlockOwnerDeletion(blockOwnerDeletion): { blockOwnerDeletion: blockOwnerDeletion },
          '#withController':: d.fn(help='"If true, this reference points to the managing controller."', args=[d.arg(name='controller', type=d.T.boolean)]),
          withController(controller): { controller: controller },
          '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { kind: kind },
          '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { uid: uid },
        },
        '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { template+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { template+: { metadata+: { annotations+: annotations } } } },
        '#withGenerateName':: d.fn(help='"generateName is an optional prefix, used by the server, to generate a unique\\nname ONLY IF the Name field has not been provided.\\nIf this field is used, the name returned to the client will be different\\nthan the name passed. This value will also be combined with a unique suffix.\\nThe provided value has the same validation rules as the Name field,\\nand may be truncated by the length of the suffix required to make the value\\nunique on the server.\\n\\nIf this field is specified and the generated name exists, the server will\\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\\nshould retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\\n\\nDeprecated: This field has no function and is going to be removed in a next release."', args=[d.arg(name='generateName', type=d.T.string)]),
        withGenerateName(generateName): { spec+: { template+: { metadata+: { generateName: generateName } } } },
        '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { template+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { template+: { metadata+: { labels+: labels } } } },
        '#withName':: d.fn(help='"name must be unique within a namespace. Is required when creating resources, although\\nsome resources may allow a client to request the generation of an appropriate name\\nautomatically. Name is primarily intended for creation idempotence and configuration\\ndefinition.\\nCannot be updated.\\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\\n\\nDeprecated: This field has no function and is going to be removed in a next release."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { template+: { metadata+: { name: name } } } },
        '#withNamespace':: d.fn(help='"namespace defines the space within each name must be unique. An empty namespace is\\nequivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation.\\nNot all objects are required to be scoped to a namespace - the value of this field for\\nthose objects will be empty.\\n\\nMust be a DNS_LABEL.\\nCannot be updated.\\nMore info: http://kubernetes.io/docs/user-guide/namespaces\\n\\nDeprecated: This field has no function and is going to be removed in a next release."', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { template+: { metadata+: { namespace: namespace } } } },
        '#withOwnerReferences':: d.fn(help='"ownerReferences is the list of objects depended by this object. If ALL objects in the list have\\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\\nthen an entry in this list will point to this controller, with the controller field set to true.\\nThere cannot be more than one managing controller.\\n\\nDeprecated: This field has no function and is going to be removed in a next release."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
        withOwnerReferences(ownerReferences): { spec+: { template+: { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } } } },
        '#withOwnerReferencesMixin':: d.fn(help='"ownerReferences is the list of objects depended by this object. If ALL objects in the list have\\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\\nthen an entry in this list will point to this controller, with the controller field set to true.\\nThere cannot be more than one managing controller.\\n\\nDeprecated: This field has no function and is going to be removed in a next release."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
        withOwnerReferencesMixin(ownerReferences): { spec+: { template+: { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } } } },
      },
      '#spec':: d.obj(help='"spec is the specification of the desired behavior of the machine.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"'),
      spec: {
        '#bootstrap':: d.obj(help='"bootstrap is a reference to a local struct which encapsulates\\nfields to configure the Machine’s bootstrapping mechanism."'),
        bootstrap: {
          '#configRef':: d.obj(help='"configRef is a reference to a bootstrap provider-specific resource\\nthat holds configuration details. The reference is optional to\\nallow users/operators to specify Bootstrap.Data without\\nthe need of a controller."'),
          configRef: {
            '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { apiVersion: apiVersion } } } } } },
            '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { fieldPath: fieldPath } } } } } },
            '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { kind: kind } } } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { name: name } } } } } },
            '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { namespace: namespace } } } } } },
            '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
            withResourceVersion(resourceVersion): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { resourceVersion: resourceVersion } } } } } },
            '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
            withUid(uid): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { uid: uid } } } } } },
          },
          '#withData':: d.fn(help='"data contains the bootstrap data, such as cloud-init details scripts.\\nIf nil, the Machine should remain in the Pending state.\\n\\nDeprecated: Switch to DataSecretName."', args=[d.arg(name='data', type=d.T.string)]),
          withData(data): { spec+: { template+: { spec+: { bootstrap+: { data: data } } } } },
          '#withDataSecretName':: d.fn(help='"dataSecretName is the name of the secret that stores the bootstrap data script.\\nIf nil, the Machine should remain in the Pending state."', args=[d.arg(name='dataSecretName', type=d.T.string)]),
          withDataSecretName(dataSecretName): { spec+: { template+: { spec+: { bootstrap+: { dataSecretName: dataSecretName } } } } },
        },
        '#infrastructureRef':: d.obj(help='"infrastructureRef is a required reference to a custom resource\\noffered by an infrastructure provider."'),
        infrastructureRef: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { spec+: { template+: { spec+: { infrastructureRef+: { apiVersion: apiVersion } } } } },
          '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { spec+: { template+: { spec+: { infrastructureRef+: { fieldPath: fieldPath } } } } },
          '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { template+: { spec+: { infrastructureRef+: { kind: kind } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { template+: { spec+: { infrastructureRef+: { name: name } } } } },
          '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { spec+: { template+: { spec+: { infrastructureRef+: { namespace: namespace } } } } },
          '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
          withResourceVersion(resourceVersion): { spec+: { template+: { spec+: { infrastructureRef+: { resourceVersion: resourceVersion } } } } },
          '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { spec+: { template+: { spec+: { infrastructureRef+: { uid: uid } } } } },
        },
        '#withClusterName':: d.fn(help='"clusterName is the name of the Cluster this object belongs to."', args=[d.arg(name='clusterName', type=d.T.string)]),
        withClusterName(clusterName): { spec+: { template+: { spec+: { clusterName: clusterName } } } },
        '#withFailureDomain':: d.fn(help='"failureDomain is the failure domain the machine will be created in.\\nMust match a key in the FailureDomains map stored on the cluster object."', args=[d.arg(name='failureDomain', type=d.T.string)]),
        withFailureDomain(failureDomain): { spec+: { template+: { spec+: { failureDomain: failureDomain } } } },
        '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`"', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
        withNodeDrainTimeout(nodeDrainTimeout): { spec+: { template+: { spec+: { nodeDrainTimeout: nodeDrainTimeout } } } },
        '#withProviderID':: d.fn(help='"providerID is the identification ID of the machine provided by the provider.\\nThis field must match the provider ID as seen on the node object corresponding to this machine.\\nThis field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler\\nwith cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out\\nmachines at provider which could not get registered as Kubernetes nodes. With cluster-api as a\\ngeneric out-of-tree provider for autoscaler, this field is required by autoscaler to be\\nable to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver\\nand then a comparison is done to find out unregistered machines and are marked for delete.\\nThis field will be set by the actuators and consumed by higher level entities like autoscaler that will\\nbe interfacing with cluster-api as generic provider."', args=[d.arg(name='providerID', type=d.T.string)]),
        withProviderID(providerID): { spec+: { template+: { spec+: { providerID: providerID } } } },
        '#withVersion':: d.fn(help='"version defines the desired Kubernetes version.\\nThis field is meant to be optionally used by bootstrap providers."', args=[d.arg(name='version', type=d.T.string)]),
        withVersion(version): { spec+: { template+: { spec+: { version: version } } } },
      },
    },
    '#withClusterName':: d.fn(help='"clusterName is the name of the Cluster this object belongs to."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { spec+: { clusterName: clusterName } },
    '#withMinReadySeconds':: d.fn(help='"minReadySeconds is the minimum number of seconds for which a newly created machine should\\nbe ready.\\nDefaults to 0 (machine will be considered available as soon as it\\nis ready)"', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
    withMinReadySeconds(minReadySeconds): { spec+: { minReadySeconds: minReadySeconds } },
    '#withPaused':: d.fn(help='"paused indicates that the deployment is paused."', args=[d.arg(name='paused', type=d.T.boolean)]),
    withPaused(paused): { spec+: { paused: paused } },
    '#withProgressDeadlineSeconds':: d.fn(help='"progressDeadlineSeconds is the maximum time in seconds for a deployment to make progress before it\\nis considered to be failed. The deployment controller will continue to\\nprocess failed deployments and a condition with a ProgressDeadlineExceeded\\nreason will be surfaced in the deployment status. Note that progress will\\nnot be estimated during the time a deployment is paused. Defaults to 600s."', args=[d.arg(name='progressDeadlineSeconds', type=d.T.integer)]),
    withProgressDeadlineSeconds(progressDeadlineSeconds): { spec+: { progressDeadlineSeconds: progressDeadlineSeconds } },
    '#withReplicas':: d.fn(help='"replicas is the number of desired machines. Defaults to 1.\\nThis is a pointer to distinguish between explicit zero and not specified."', args=[d.arg(name='replicas', type=d.T.integer)]),
    withReplicas(replicas): { spec+: { replicas: replicas } },
    '#withRevisionHistoryLimit':: d.fn(help='"revisionHistoryLimit is the number of old MachineSets to retain to allow rollback.\\nThis is a pointer to distinguish between explicit zero and not specified.\\nDefaults to 1."', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
    withRevisionHistoryLimit(revisionHistoryLimit): { spec+: { revisionHistoryLimit: revisionHistoryLimit } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
