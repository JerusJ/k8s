{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='cluster', url='', help='"Cluster is the Schema for the clusters API."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Cluster', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'cluster.x-k8s.io/v1beta1',
    kind: 'Cluster',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"spec is the desired state of Cluster."'),
  spec: {
    '#availabilityGates':: d.obj(help='"availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\\n\\nIf this field is not defined and the Cluster implements a managed topology, availabilityGates\\nfrom the corresponding ClusterClass will be used, if any.\\n\\nNOTE: this field is considered only for computing v1beta2 conditions."'),
    availabilityGates: {
      '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Cluster's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as availability gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
      withConditionType(conditionType): { conditionType: conditionType },
      '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this availabilityGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
      withPolarity(polarity): { polarity: polarity },
    },
    '#clusterNetwork':: d.obj(help='"clusterNetwork represents the cluster network configuration."'),
    clusterNetwork: {
      '#pods':: d.obj(help='"pods is the network ranges from which Pod networks are allocated."'),
      pods: {
        '#withCidrBlocks':: d.fn(help='"cidrBlocks is a list of CIDR blocks."', args=[d.arg(name='cidrBlocks', type=d.T.array)]),
        withCidrBlocks(cidrBlocks): { spec+: { clusterNetwork+: { pods+: { cidrBlocks: if std.isArray(v=cidrBlocks) then cidrBlocks else [cidrBlocks] } } } },
        '#withCidrBlocksMixin':: d.fn(help='"cidrBlocks is a list of CIDR blocks."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cidrBlocks', type=d.T.array)]),
        withCidrBlocksMixin(cidrBlocks): { spec+: { clusterNetwork+: { pods+: { cidrBlocks+: if std.isArray(v=cidrBlocks) then cidrBlocks else [cidrBlocks] } } } },
      },
      '#services':: d.obj(help='"services is the network ranges from which service VIPs are allocated."'),
      services: {
        '#withCidrBlocks':: d.fn(help='"cidrBlocks is a list of CIDR blocks."', args=[d.arg(name='cidrBlocks', type=d.T.array)]),
        withCidrBlocks(cidrBlocks): { spec+: { clusterNetwork+: { services+: { cidrBlocks: if std.isArray(v=cidrBlocks) then cidrBlocks else [cidrBlocks] } } } },
        '#withCidrBlocksMixin':: d.fn(help='"cidrBlocks is a list of CIDR blocks."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cidrBlocks', type=d.T.array)]),
        withCidrBlocksMixin(cidrBlocks): { spec+: { clusterNetwork+: { services+: { cidrBlocks+: if std.isArray(v=cidrBlocks) then cidrBlocks else [cidrBlocks] } } } },
      },
      '#withApiServerPort':: d.fn(help='"apiServerPort specifies the port the API Server should bind to.\\nDefaults to 6443."', args=[d.arg(name='apiServerPort', type=d.T.integer)]),
      withApiServerPort(apiServerPort): { spec+: { clusterNetwork+: { apiServerPort: apiServerPort } } },
      '#withServiceDomain':: d.fn(help='"serviceDomain is the domain name for services."', args=[d.arg(name='serviceDomain', type=d.T.string)]),
      withServiceDomain(serviceDomain): { spec+: { clusterNetwork+: { serviceDomain: serviceDomain } } },
    },
    '#controlPlaneEndpoint':: d.obj(help='"controlPlaneEndpoint represents the endpoint used to communicate with the control plane."'),
    controlPlaneEndpoint: {
      '#withHost':: d.fn(help='"host is the hostname on which the API server is serving."', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { controlPlaneEndpoint+: { host: host } } },
      '#withPort':: d.fn(help='"port is the port on which the API server is serving."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { controlPlaneEndpoint+: { port: port } } },
    },
    '#controlPlaneRef':: d.obj(help='"controlPlaneRef is an optional reference to a provider-specific resource that holds\\nthe details for provisioning the Control Plane for a Cluster."'),
    controlPlaneRef: {
      '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { spec+: { controlPlaneRef+: { apiVersion: apiVersion } } },
      '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
      withFieldPath(fieldPath): { spec+: { controlPlaneRef+: { fieldPath: fieldPath } } },
      '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { controlPlaneRef+: { kind: kind } } },
      '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { controlPlaneRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { controlPlaneRef+: { namespace: namespace } } },
      '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
      withResourceVersion(resourceVersion): { spec+: { controlPlaneRef+: { resourceVersion: resourceVersion } } },
      '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
      withUid(uid): { spec+: { controlPlaneRef+: { uid: uid } } },
    },
    '#infrastructureRef':: d.obj(help='"infrastructureRef is a reference to a provider-specific resource that holds the details\\nfor provisioning infrastructure for a cluster in said provider."'),
    infrastructureRef: {
      '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { spec+: { infrastructureRef+: { apiVersion: apiVersion } } },
      '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
      withFieldPath(fieldPath): { spec+: { infrastructureRef+: { fieldPath: fieldPath } } },
      '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { infrastructureRef+: { kind: kind } } },
      '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { infrastructureRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { infrastructureRef+: { namespace: namespace } } },
      '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
      withResourceVersion(resourceVersion): { spec+: { infrastructureRef+: { resourceVersion: resourceVersion } } },
      '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
      withUid(uid): { spec+: { infrastructureRef+: { uid: uid } } },
    },
    '#topology':: d.obj(help='"topology encapsulates the topology for the cluster.\\nNOTE: It is required to enable the ClusterTopology\\nfeature gate flag to activate managed topologies support;\\nthis feature is highly experimental, and parts of it might still be not implemented."'),
    topology: {
      '#controlPlane':: d.obj(help='"controlPlane describes the cluster control plane."'),
      controlPlane: {
        '#machineHealthCheck':: d.obj(help='"machineHealthCheck allows to enable, disable and override\\nthe MachineHealthCheck configuration in the ClusterClass for this control plane."'),
        machineHealthCheck: {
          '#remediationTemplate':: d.obj(help='"remediationTemplate is a reference to a remediation template\\nprovided by an infrastructure provider.\\n\\nThis field is completely optional, when filled, the MachineHealthCheck controller\\ncreates a new object from the template referenced and hands off remediation of the machine to\\na controller that lives outside of Cluster API."'),
          remediationTemplate: {
            '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { apiVersion: apiVersion } } } } } },
            '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { fieldPath: fieldPath } } } } } },
            '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { kind: kind } } } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { name: name } } } } } },
            '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { namespace: namespace } } } } } },
            '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
            withResourceVersion(resourceVersion): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { resourceVersion: resourceVersion } } } } } },
            '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
            withUid(uid): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { uid: uid } } } } } },
          },
          '#unhealthyConditions':: d.obj(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."'),
          unhealthyConditions: {
            '#withTimeout':: d.fn(help='"timeout is the duration that a node must be in a given status for,\\nafter which the node is considered unhealthy.\\nFor example, with a value of \\"1h\\", the node must match the status\\nfor at least 1 hour before being considered unhealthy."', args=[d.arg(name='timeout', type=d.T.string)]),
            withTimeout(timeout): { timeout: timeout },
            '#withType':: d.fn(help='"type of Node condition"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { type: type },
          },
          '#withEnable':: d.fn(help='"enable controls if a MachineHealthCheck should be created for the target machines.\\n\\nIf false: No MachineHealthCheck will be created.\\n\\nIf not set(default): A MachineHealthCheck will be created if it is defined here or\\n in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.\\n\\nIf true: A MachineHealthCheck is guaranteed to be created. Cluster validation will\\nblock if `enable` is true and no MachineHealthCheck definition is available."', args=[d.arg(name='enable', type=d.T.boolean)]),
          withEnable(enable): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { enable: enable } } } } },
          '#withMaxUnhealthy':: d.fn(help='"maxUnhealthy specifies the maximum number of unhealthy machines allowed.\\nAny further remediation is only allowed if at most \\"maxUnhealthy\\" machines selected by\\n\\"selector\\" are not healthy."', args=[d.arg(name='maxUnhealthy', type=d.T.any)]),
          withMaxUnhealthy(maxUnhealthy): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { maxUnhealthy: maxUnhealthy } } } } },
          '#withNodeStartupTimeout':: d.fn(help="\"nodeStartupTimeout allows to set the maximum time for MachineHealthCheck\\nto consider a Machine unhealthy if a corresponding Node isn't associated\\nthrough a `Spec.ProviderID` field.\\n\\nThe duration set in this field is compared to the greatest of:\\n- Cluster's infrastructure ready condition timestamp (if and when available)\\n- Control Plane's initialized condition timestamp (if and when available)\\n- Machine's infrastructure ready condition timestamp (if and when available)\\n- Machine's metadata creation timestamp\\n\\nDefaults to 10 minutes.\\nIf you wish to disable this feature, set the value explicitly to 0.\"", args=[d.arg(name='nodeStartupTimeout', type=d.T.string)]),
          withNodeStartupTimeout(nodeStartupTimeout): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { nodeStartupTimeout: nodeStartupTimeout } } } } },
          '#withUnhealthyConditions':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
          withUnhealthyConditions(unhealthyConditions): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { unhealthyConditions: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } } } } },
          '#withUnhealthyConditionsMixin':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
          withUnhealthyConditionsMixin(unhealthyConditions): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { unhealthyConditions+: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } } } } },
          '#withUnhealthyRange':: d.fn(help='"unhealthyRange specifies the range of unhealthy machines allowed.\\nAny further remediation is only allowed if the number of machines selected by \\"selector\\" as not healthy\\nis within the range of \\"unhealthyRange\\". Takes precedence over maxUnhealthy.\\nEg. \\"[3-5]\\" - This means that remediation will be allowed only when:\\n(a) there are at least 3 unhealthy machines (and)\\n(b) there are at most 5 unhealthy machines"', args=[d.arg(name='unhealthyRange', type=d.T.string)]),
          withUnhealthyRange(unhealthyRange): { spec+: { topology+: { controlPlane+: { machineHealthCheck+: { unhealthyRange: unhealthyRange } } } } },
        },
        '#metadata':: d.obj(help='"metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane\\nif the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it\\nis applied only to the ControlPlane.\\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass."'),
        metadata: {
          '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { topology+: { controlPlane+: { metadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { topology+: { controlPlane+: { metadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { topology+: { controlPlane+: { metadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { topology+: { controlPlane+: { metadata+: { labels+: labels } } } } },
        },
        '#readinessGates':: d.obj(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nIf this field is not defined, readinessGates from the corresponding ControlPlaneClass will be used, if any.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\""),
        readinessGates: {
          '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Machine's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
          withConditionType(conditionType): { conditionType: conditionType },
          '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this readinessGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
          withPolarity(polarity): { polarity: polarity },
        },
        '#variables':: d.obj(help='"variables can be used to customize the ControlPlane through patches."'),
        variables: {
          '#overrides':: d.obj(help='"overrides can be used to override Cluster level variables."'),
          overrides: {
            '#withDefinitionFrom':: d.fn(help='"definitionFrom specifies where the definition of this Variable is from.\\n\\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion."', args=[d.arg(name='definitionFrom', type=d.T.string)]),
            withDefinitionFrom(definitionFrom): { definitionFrom: definitionFrom },
            '#withName':: d.fn(help='"name of the variable."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"value of the variable.\\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\\nfrom the ClusterClass.\\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\\ni.e. it is not possible to have no type field.\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111"', args=[d.arg(name='value', type=d.T.any)]),
            withValue(value): { value: value },
          },
          '#withOverrides':: d.fn(help='"overrides can be used to override Cluster level variables."', args=[d.arg(name='overrides', type=d.T.array)]),
          withOverrides(overrides): { spec+: { topology+: { controlPlane+: { variables+: { overrides: if std.isArray(v=overrides) then overrides else [overrides] } } } } },
          '#withOverridesMixin':: d.fn(help='"overrides can be used to override Cluster level variables."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overrides', type=d.T.array)]),
          withOverridesMixin(overrides): { spec+: { topology+: { controlPlane+: { variables+: { overrides+: if std.isArray(v=overrides) then overrides else [overrides] } } } } },
        },
        '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
        withNodeDeletionTimeout(nodeDeletionTimeout): { spec+: { topology+: { controlPlane+: { nodeDeletionTimeout: nodeDeletionTimeout } } } },
        '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`"', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
        withNodeDrainTimeout(nodeDrainTimeout): { spec+: { topology+: { controlPlane+: { nodeDrainTimeout: nodeDrainTimeout } } } },
        '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
        withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { spec+: { topology+: { controlPlane+: { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout } } } },
        '#withReadinessGates':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nIf this field is not defined, readinessGates from the corresponding ControlPlaneClass will be used, if any.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\"", args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGates(readinessGates): { spec+: { topology+: { controlPlane+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } },
        '#withReadinessGatesMixin':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nIf this field is not defined, readinessGates from the corresponding ControlPlaneClass will be used, if any.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGatesMixin(readinessGates): { spec+: { topology+: { controlPlane+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } },
        '#withReplicas':: d.fn(help="\"replicas is the number of control plane nodes.\\nIf the value is nil, the ControlPlane object is created without the number of Replicas\\nand it's assumed that the control plane controller does not implement support for this field.\\nWhen specified against a control plane provider that lacks support for this field, this value will be ignored.\"", args=[d.arg(name='replicas', type=d.T.integer)]),
        withReplicas(replicas): { spec+: { topology+: { controlPlane+: { replicas: replicas } } } },
      },
      '#variables':: d.obj(help='"variables can be used to customize the Cluster through\\npatches. They must comply to the corresponding\\nVariableClasses defined in the ClusterClass."'),
      variables: {
        '#withDefinitionFrom':: d.fn(help='"definitionFrom specifies where the definition of this Variable is from.\\n\\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion."', args=[d.arg(name='definitionFrom', type=d.T.string)]),
        withDefinitionFrom(definitionFrom): { definitionFrom: definitionFrom },
        '#withName':: d.fn(help='"name of the variable."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='"value of the variable.\\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\\nfrom the ClusterClass.\\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\\ni.e. it is not possible to have no type field.\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111"', args=[d.arg(name='value', type=d.T.any)]),
        withValue(value): { value: value },
      },
      '#withClass':: d.fn(help='"class is the name of the ClusterClass object to create the topology."', args=[d.arg(name='class', type=d.T.string)]),
      withClass(class): { spec+: { topology+: { class: class } } },
      '#withClassNamespace':: d.fn(help='"classNamespace is the namespace of the ClusterClass object to create the topology.\\nIf the namespace is empty or not set, it is defaulted to the namespace of the cluster object.\\nValue must follow the DNS1123Subdomain syntax."', args=[d.arg(name='classNamespace', type=d.T.string)]),
      withClassNamespace(classNamespace): { spec+: { topology+: { classNamespace: classNamespace } } },
      '#withRolloutAfter':: d.fn(help='"rolloutAfter performs a rollout of the entire cluster one component at a time,\\ncontrol plane first and then machine deployments.\\n\\nDeprecated: This field has no function and is going to be removed in the next apiVersion."', args=[d.arg(name='rolloutAfter', type=d.T.string)]),
      withRolloutAfter(rolloutAfter): { spec+: { topology+: { rolloutAfter: rolloutAfter } } },
      '#withVariables':: d.fn(help='"variables can be used to customize the Cluster through\\npatches. They must comply to the corresponding\\nVariableClasses defined in the ClusterClass."', args=[d.arg(name='variables', type=d.T.array)]),
      withVariables(variables): { spec+: { topology+: { variables: if std.isArray(v=variables) then variables else [variables] } } },
      '#withVariablesMixin':: d.fn(help='"variables can be used to customize the Cluster through\\npatches. They must comply to the corresponding\\nVariableClasses defined in the ClusterClass."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='variables', type=d.T.array)]),
      withVariablesMixin(variables): { spec+: { topology+: { variables+: if std.isArray(v=variables) then variables else [variables] } } },
      '#withVersion':: d.fn(help='"version is the Kubernetes version of the cluster."', args=[d.arg(name='version', type=d.T.string)]),
      withVersion(version): { spec+: { topology+: { version: version } } },
      '#workers':: d.obj(help='"workers encapsulates the different constructs that form the worker nodes\\nfor the cluster."'),
      workers: {
        '#machineDeployments':: d.obj(help='"machineDeployments is a list of machine deployments in the cluster."'),
        machineDeployments: {
          '#machineHealthCheck':: d.obj(help='"machineHealthCheck allows to enable, disable and override\\nthe MachineHealthCheck configuration in the ClusterClass for this MachineDeployment."'),
          machineHealthCheck: {
            '#remediationTemplate':: d.obj(help='"remediationTemplate is a reference to a remediation template\\nprovided by an infrastructure provider.\\n\\nThis field is completely optional, when filled, the MachineHealthCheck controller\\ncreates a new object from the template referenced and hands off remediation of the machine to\\na controller that lives outside of Cluster API."'),
            remediationTemplate: {
              '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { machineHealthCheck+: { remediationTemplate+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { machineHealthCheck+: { remediationTemplate+: { fieldPath: fieldPath } } },
              '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { machineHealthCheck+: { remediationTemplate+: { kind: kind } } },
              '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { machineHealthCheck+: { remediationTemplate+: { name: name } } },
              '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { machineHealthCheck+: { remediationTemplate+: { namespace: namespace } } },
              '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
              withResourceVersion(resourceVersion): { machineHealthCheck+: { remediationTemplate+: { resourceVersion: resourceVersion } } },
              '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
              withUid(uid): { machineHealthCheck+: { remediationTemplate+: { uid: uid } } },
            },
            '#unhealthyConditions':: d.obj(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."'),
            unhealthyConditions: {
              '#withTimeout':: d.fn(help='"timeout is the duration that a node must be in a given status for,\\nafter which the node is considered unhealthy.\\nFor example, with a value of \\"1h\\", the node must match the status\\nfor at least 1 hour before being considered unhealthy."', args=[d.arg(name='timeout', type=d.T.string)]),
              withTimeout(timeout): { timeout: timeout },
              '#withType':: d.fn(help='"type of Node condition"', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { type: type },
            },
            '#withEnable':: d.fn(help='"enable controls if a MachineHealthCheck should be created for the target machines.\\n\\nIf false: No MachineHealthCheck will be created.\\n\\nIf not set(default): A MachineHealthCheck will be created if it is defined here or\\n in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.\\n\\nIf true: A MachineHealthCheck is guaranteed to be created. Cluster validation will\\nblock if `enable` is true and no MachineHealthCheck definition is available."', args=[d.arg(name='enable', type=d.T.boolean)]),
            withEnable(enable): { machineHealthCheck+: { enable: enable } },
            '#withMaxUnhealthy':: d.fn(help='"maxUnhealthy specifies the maximum number of unhealthy machines allowed.\\nAny further remediation is only allowed if at most \\"maxUnhealthy\\" machines selected by\\n\\"selector\\" are not healthy."', args=[d.arg(name='maxUnhealthy', type=d.T.any)]),
            withMaxUnhealthy(maxUnhealthy): { machineHealthCheck+: { maxUnhealthy: maxUnhealthy } },
            '#withNodeStartupTimeout':: d.fn(help="\"nodeStartupTimeout allows to set the maximum time for MachineHealthCheck\\nto consider a Machine unhealthy if a corresponding Node isn't associated\\nthrough a `Spec.ProviderID` field.\\n\\nThe duration set in this field is compared to the greatest of:\\n- Cluster's infrastructure ready condition timestamp (if and when available)\\n- Control Plane's initialized condition timestamp (if and when available)\\n- Machine's infrastructure ready condition timestamp (if and when available)\\n- Machine's metadata creation timestamp\\n\\nDefaults to 10 minutes.\\nIf you wish to disable this feature, set the value explicitly to 0.\"", args=[d.arg(name='nodeStartupTimeout', type=d.T.string)]),
            withNodeStartupTimeout(nodeStartupTimeout): { machineHealthCheck+: { nodeStartupTimeout: nodeStartupTimeout } },
            '#withUnhealthyConditions':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
            withUnhealthyConditions(unhealthyConditions): { machineHealthCheck+: { unhealthyConditions: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } },
            '#withUnhealthyConditionsMixin':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
            withUnhealthyConditionsMixin(unhealthyConditions): { machineHealthCheck+: { unhealthyConditions+: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } },
            '#withUnhealthyRange':: d.fn(help='"unhealthyRange specifies the range of unhealthy machines allowed.\\nAny further remediation is only allowed if the number of machines selected by \\"selector\\" as not healthy\\nis within the range of \\"unhealthyRange\\". Takes precedence over maxUnhealthy.\\nEg. \\"[3-5]\\" - This means that remediation will be allowed only when:\\n(a) there are at least 3 unhealthy machines (and)\\n(b) there are at most 5 unhealthy machines"', args=[d.arg(name='unhealthyRange', type=d.T.string)]),
            withUnhealthyRange(unhealthyRange): { machineHealthCheck+: { unhealthyRange: unhealthyRange } },
          },
          '#metadata':: d.obj(help='"metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment.\\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass."'),
          metadata: {
            '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { metadata+: { annotations: annotations } },
            '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
            '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { metadata+: { labels: labels } },
            '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { metadata+: { labels+: labels } },
          },
          '#readinessGates':: d.obj(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nIf this field is not defined, readinessGates from the corresponding MachineDeploymentClass will be used, if any.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\""),
          readinessGates: {
            '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Machine's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
            withConditionType(conditionType): { conditionType: conditionType },
            '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this readinessGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
            withPolarity(polarity): { polarity: polarity },
          },
          '#strategy':: d.obj(help='"strategy is the deployment strategy to use to replace existing machines with\\nnew ones."'),
          strategy: {
            '#remediation':: d.obj(help='"remediation controls the strategy of remediating unhealthy machines\\nand how remediating operations should occur during the lifecycle of the dependant MachineSets."'),
            remediation: {
              '#withMaxInFlight':: d.fn(help="\"maxInFlight determines how many in flight remediations should happen at the same time.\\n\\nRemediation only happens on the MachineSet with the most current revision, while\\nolder MachineSets (usually present during rollout operations) aren't allowed to remediate.\\n\\nNote: In general (independent of remediations), unhealthy machines are always\\nprioritized during scale down operations over healthy ones.\\n\\nMaxInFlight can be set to a fixed number or a percentage.\\nExample: when this is set to 20%, the MachineSet controller deletes at most 20% of\\nthe desired replicas.\\n\\nIf not set, remediation is limited to all machines (bounded by replicas)\\nunder the active MachineSet's management.\"", args=[d.arg(name='maxInFlight', type=d.T.any)]),
              withMaxInFlight(maxInFlight): { strategy+: { remediation+: { maxInFlight: maxInFlight } } },
            },
            '#rollingUpdate':: d.obj(help='"rollingUpdate is the rolling update config params. Present only if\\nMachineDeploymentStrategyType = RollingUpdate."'),
            rollingUpdate: {
              '#withDeletePolicy':: d.fn(help='"deletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling.\\nValid values are \\"Random, \\"Newest\\", \\"Oldest\\"\\nWhen no value is supplied, the default DeletePolicy of MachineSet is used"', args=[d.arg(name='deletePolicy', type=d.T.string)]),
              withDeletePolicy(deletePolicy): { strategy+: { rollingUpdate+: { deletePolicy: deletePolicy } } },
              '#withMaxSurge':: d.fn(help='"maxSurge is the maximum number of machines that can be scheduled above the\\ndesired number of machines.\\nValue can be an absolute number (ex: 5) or a percentage of\\ndesired machines (ex: 10%).\\nThis can not be 0 if MaxUnavailable is 0.\\nAbsolute number is calculated from percentage by rounding up.\\nDefaults to 1.\\nExample: when this is set to 30%, the new MachineSet can be scaled\\nup immediately when the rolling update starts, such that the total\\nnumber of old and new machines do not exceed 130% of desired\\nmachines. Once old machines have been killed, new MachineSet can\\nbe scaled up further, ensuring that total number of machines running\\nat any time during the update is at most 130% of desired machines."', args=[d.arg(name='maxSurge', type=d.T.any)]),
              withMaxSurge(maxSurge): { strategy+: { rollingUpdate+: { maxSurge: maxSurge } } },
              '#withMaxUnavailable':: d.fn(help='"maxUnavailable is the maximum number of machines that can be unavailable during the update.\\nValue can be an absolute number (ex: 5) or a percentage of desired\\nmachines (ex: 10%).\\nAbsolute number is calculated from percentage by rounding down.\\nThis can not be 0 if MaxSurge is 0.\\nDefaults to 0.\\nExample: when this is set to 30%, the old MachineSet can be scaled\\ndown to 70% of desired machines immediately when the rolling update\\nstarts. Once new machines are ready, old MachineSet can be scaled\\ndown further, followed by scaling up the new MachineSet, ensuring\\nthat the total number of machines available at all times\\nduring the update is at least 70% of desired machines."', args=[d.arg(name='maxUnavailable', type=d.T.any)]),
              withMaxUnavailable(maxUnavailable): { strategy+: { rollingUpdate+: { maxUnavailable: maxUnavailable } } },
            },
            '#withType':: d.fn(help='"type of deployment. Allowed values are RollingUpdate and OnDelete.\\nThe default is RollingUpdate."', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { strategy+: { type: type } },
          },
          '#variables':: d.obj(help='"variables can be used to customize the MachineDeployment through patches."'),
          variables: {
            '#overrides':: d.obj(help='"overrides can be used to override Cluster level variables."'),
            overrides: {
              '#withDefinitionFrom':: d.fn(help='"definitionFrom specifies where the definition of this Variable is from.\\n\\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion."', args=[d.arg(name='definitionFrom', type=d.T.string)]),
              withDefinitionFrom(definitionFrom): { definitionFrom: definitionFrom },
              '#withName':: d.fn(help='"name of the variable."', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='"value of the variable.\\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\\nfrom the ClusterClass.\\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\\ni.e. it is not possible to have no type field.\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111"', args=[d.arg(name='value', type=d.T.any)]),
              withValue(value): { value: value },
            },
            '#withOverrides':: d.fn(help='"overrides can be used to override Cluster level variables."', args=[d.arg(name='overrides', type=d.T.array)]),
            withOverrides(overrides): { variables+: { overrides: if std.isArray(v=overrides) then overrides else [overrides] } },
            '#withOverridesMixin':: d.fn(help='"overrides can be used to override Cluster level variables."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overrides', type=d.T.array)]),
            withOverridesMixin(overrides): { variables+: { overrides+: if std.isArray(v=overrides) then overrides else [overrides] } },
          },
          '#withClass':: d.fn(help='"class is the name of the MachineDeploymentClass used to create the set of worker nodes.\\nThis should match one of the deployment classes defined in the ClusterClass object\\nmentioned in the `Cluster.Spec.Class` field."', args=[d.arg(name='class', type=d.T.string)]),
          withClass(class): { class: class },
          '#withFailureDomain':: d.fn(help='"failureDomain is the failure domain the machines will be created in.\\nMust match a key in the FailureDomains map stored on the cluster object."', args=[d.arg(name='failureDomain', type=d.T.string)]),
          withFailureDomain(failureDomain): { failureDomain: failureDomain },
          '#withMinReadySeconds':: d.fn(help='"minReadySeconds is the minimum number of seconds for which a newly created machine should\\nbe ready.\\nDefaults to 0 (machine will be considered available as soon as it\\nis ready)"', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
          withMinReadySeconds(minReadySeconds): { minReadySeconds: minReadySeconds },
          '#withName':: d.fn(help="\"name is the unique identifier for this MachineDeploymentTopology.\\nThe value is used with other unique identifiers to create a MachineDeployment's Name\\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\\nthe values are hashed together.\"", args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
          withNodeDeletionTimeout(nodeDeletionTimeout): { nodeDeletionTimeout: nodeDeletionTimeout },
          '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`"', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
          withNodeDrainTimeout(nodeDrainTimeout): { nodeDrainTimeout: nodeDrainTimeout },
          '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
          withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout },
          '#withReadinessGates':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nIf this field is not defined, readinessGates from the corresponding MachineDeploymentClass will be used, if any.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\"", args=[d.arg(name='readinessGates', type=d.T.array)]),
          withReadinessGates(readinessGates): { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] },
          '#withReadinessGatesMixin':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nIf this field is not defined, readinessGates from the corresponding MachineDeploymentClass will be used, if any.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='readinessGates', type=d.T.array)]),
          withReadinessGatesMixin(readinessGates): { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] },
          '#withReplicas':: d.fn(help="\"replicas is the number of worker nodes belonging to this set.\\nIf the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to 1)\\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\\nof this value.\"", args=[d.arg(name='replicas', type=d.T.integer)]),
          withReplicas(replicas): { replicas: replicas },
        },
        '#machinePools':: d.obj(help='"machinePools is a list of machine pools in the cluster."'),
        machinePools: {
          '#metadata':: d.obj(help='"metadata is the metadata applied to the MachinePool.\\nAt runtime this metadata is merged with the corresponding metadata from the ClusterClass."'),
          metadata: {
            '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { metadata+: { annotations: annotations } },
            '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
            '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { metadata+: { labels: labels } },
            '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { metadata+: { labels+: labels } },
          },
          '#variables':: d.obj(help='"variables can be used to customize the MachinePool through patches."'),
          variables: {
            '#overrides':: d.obj(help='"overrides can be used to override Cluster level variables."'),
            overrides: {
              '#withDefinitionFrom':: d.fn(help='"definitionFrom specifies where the definition of this Variable is from.\\n\\nDeprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion."', args=[d.arg(name='definitionFrom', type=d.T.string)]),
              withDefinitionFrom(definitionFrom): { definitionFrom: definitionFrom },
              '#withName':: d.fn(help='"name of the variable."', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='"value of the variable.\\nNote: the value will be validated against the schema of the corresponding ClusterClassVariable\\nfrom the ClusterClass.\\nNote: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a\\nhard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,\\ni.e. it is not possible to have no type field.\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111"', args=[d.arg(name='value', type=d.T.any)]),
              withValue(value): { value: value },
            },
            '#withOverrides':: d.fn(help='"overrides can be used to override Cluster level variables."', args=[d.arg(name='overrides', type=d.T.array)]),
            withOverrides(overrides): { variables+: { overrides: if std.isArray(v=overrides) then overrides else [overrides] } },
            '#withOverridesMixin':: d.fn(help='"overrides can be used to override Cluster level variables."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overrides', type=d.T.array)]),
            withOverridesMixin(overrides): { variables+: { overrides+: if std.isArray(v=overrides) then overrides else [overrides] } },
          },
          '#withClass':: d.fn(help='"class is the name of the MachinePoolClass used to create the pool of worker nodes.\\nThis should match one of the deployment classes defined in the ClusterClass object\\nmentioned in the `Cluster.Spec.Class` field."', args=[d.arg(name='class', type=d.T.string)]),
          withClass(class): { class: class },
          '#withFailureDomains':: d.fn(help='"failureDomains is the list of failure domains the machine pool will be created in.\\nMust match a key in the FailureDomains map stored on the cluster object."', args=[d.arg(name='failureDomains', type=d.T.array)]),
          withFailureDomains(failureDomains): { failureDomains: if std.isArray(v=failureDomains) then failureDomains else [failureDomains] },
          '#withFailureDomainsMixin':: d.fn(help='"failureDomains is the list of failure domains the machine pool will be created in.\\nMust match a key in the FailureDomains map stored on the cluster object."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='failureDomains', type=d.T.array)]),
          withFailureDomainsMixin(failureDomains): { failureDomains+: if std.isArray(v=failureDomains) then failureDomains else [failureDomains] },
          '#withMinReadySeconds':: d.fn(help='"minReadySeconds is the minimum number of seconds for which a newly created machine pool should\\nbe ready.\\nDefaults to 0 (machine will be considered available as soon as it\\nis ready)"', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
          withMinReadySeconds(minReadySeconds): { minReadySeconds: minReadySeconds },
          '#withName':: d.fn(help="\"name is the unique identifier for this MachinePoolTopology.\\nThe value is used with other unique identifiers to create a MachinePool's Name\\n(e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,\\nthe values are hashed together.\"", args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the MachinePool\\nhosts after the MachinePool is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
          withNodeDeletionTimeout(nodeDeletionTimeout): { nodeDeletionTimeout: nodeDeletionTimeout },
          '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`"', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
          withNodeDrainTimeout(nodeDrainTimeout): { nodeDrainTimeout: nodeDrainTimeout },
          '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
          withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout },
          '#withReplicas':: d.fn(help="\"replicas is the number of nodes belonging to this pool.\\nIf the value is nil, the MachinePool is created without the number of Replicas (defaulting to 1)\\nand it's assumed that an external entity (like cluster autoscaler) is responsible for the management\\nof this value.\"", args=[d.arg(name='replicas', type=d.T.integer)]),
          withReplicas(replicas): { replicas: replicas },
        },
        '#withMachineDeployments':: d.fn(help='"machineDeployments is a list of machine deployments in the cluster."', args=[d.arg(name='machineDeployments', type=d.T.array)]),
        withMachineDeployments(machineDeployments): { spec+: { topology+: { workers+: { machineDeployments: if std.isArray(v=machineDeployments) then machineDeployments else [machineDeployments] } } } },
        '#withMachineDeploymentsMixin':: d.fn(help='"machineDeployments is a list of machine deployments in the cluster."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='machineDeployments', type=d.T.array)]),
        withMachineDeploymentsMixin(machineDeployments): { spec+: { topology+: { workers+: { machineDeployments+: if std.isArray(v=machineDeployments) then machineDeployments else [machineDeployments] } } } },
        '#withMachinePools':: d.fn(help='"machinePools is a list of machine pools in the cluster."', args=[d.arg(name='machinePools', type=d.T.array)]),
        withMachinePools(machinePools): { spec+: { topology+: { workers+: { machinePools: if std.isArray(v=machinePools) then machinePools else [machinePools] } } } },
        '#withMachinePoolsMixin':: d.fn(help='"machinePools is a list of machine pools in the cluster."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='machinePools', type=d.T.array)]),
        withMachinePoolsMixin(machinePools): { spec+: { topology+: { workers+: { machinePools+: if std.isArray(v=machinePools) then machinePools else [machinePools] } } } },
      },
    },
    '#withAvailabilityGates':: d.fn(help='"availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\\n\\nIf this field is not defined and the Cluster implements a managed topology, availabilityGates\\nfrom the corresponding ClusterClass will be used, if any.\\n\\nNOTE: this field is considered only for computing v1beta2 conditions."', args=[d.arg(name='availabilityGates', type=d.T.array)]),
    withAvailabilityGates(availabilityGates): { spec+: { availabilityGates: if std.isArray(v=availabilityGates) then availabilityGates else [availabilityGates] } },
    '#withAvailabilityGatesMixin':: d.fn(help='"availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\\n\\nIf this field is not defined and the Cluster implements a managed topology, availabilityGates\\nfrom the corresponding ClusterClass will be used, if any.\\n\\nNOTE: this field is considered only for computing v1beta2 conditions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='availabilityGates', type=d.T.array)]),
    withAvailabilityGatesMixin(availabilityGates): { spec+: { availabilityGates+: if std.isArray(v=availabilityGates) then availabilityGates else [availabilityGates] } },
    '#withPaused':: d.fn(help='"paused can be used to prevent controllers from processing the Cluster and all its associated objects."', args=[d.arg(name='paused', type=d.T.boolean)]),
    withPaused(paused): { spec+: { paused: paused } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
