{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='machineSet', url='', help='"MachineSet is the Schema for the machinesets API."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of MachineSet', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'cluster.x-k8s.io/v1beta1',
    kind: 'MachineSet',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"spec is the desired state of MachineSet."'),
  spec: {
    '#machineNamingStrategy':: d.obj(help='"machineNamingStrategy allows changing the naming pattern used when creating Machines.\\nNote: InfraMachines & BootstrapConfigs will use the same name as the corresponding Machines."'),
    machineNamingStrategy: {
      '#withTemplate':: d.fn(help='"template defines the template to use for generating the names of the\\nMachine objects.\\nIf not defined, it will fallback to `{{ .machineSet.name }}-{{ .random }}`.\\nIf the generated name string exceeds 63 characters, it will be trimmed to\\n58 characters and will\\nget concatenated with a random suffix of length 5.\\nLength of the template string must not exceed 256 characters.\\nThe template allows the following variables `.cluster.name`,\\n`.machineSet.name` and `.random`.\\nThe variable `.cluster.name` retrieves the name of the cluster object\\nthat owns the Machines being created.\\nThe variable `.machineSet.name` retrieves the name of the MachineSet\\nobject that owns the Machines being created.\\nThe variable `.random` is substituted with random alphanumeric string,\\nwithout vowels, of length 5. This variable is required part of the\\ntemplate. If not provided, validation will fail."', args=[d.arg(name='template', type=d.T.string)]),
      withTemplate(template): { spec+: { machineNamingStrategy+: { template: template } } },
    },
    '#selector':: d.obj(help="\"selector is a label query over machines that should match the replica count.\\nLabel keys and values that must match in order to be controlled by this MachineSet.\\nIt must match the machine template's labels.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\""),
    selector: {
      '#matchExpressions':: d.obj(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."'),
      matchExpressions: {
        '#withKey':: d.fn(help='"key is the label key that the selector applies to."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withValues':: d.fn(help='"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch."', args=[d.arg(name='values', type=d.T.array)]),
        withValues(values): { values: if std.isArray(v=values) then values else [values] },
        '#withValuesMixin':: d.fn(help='"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
      },
      '#withMatchExpressions':: d.fn(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressions(matchExpressions): { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
      '#withMatchExpressionsMixin':: d.fn(help='"matchExpressions is a list of label selector requirements. The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressionsMixin(matchExpressions): { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
      '#withMatchLabels':: d.fn(help='"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\"key\\", the\\noperator is \\"In\\", and the values array contains only \\"value\\". The requirements are ANDed."', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabels(matchLabels): { spec+: { selector+: { matchLabels: matchLabels } } },
      '#withMatchLabelsMixin':: d.fn(help='"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\"key\\", the\\noperator is \\"In\\", and the values array contains only \\"value\\". The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabelsMixin(matchLabels): { spec+: { selector+: { matchLabels+: matchLabels } } },
    },
    '#template':: d.obj(help='"template is the object that describes the machine that will be created if\\ninsufficient replicas are detected.\\nObject references to custom resources are treated as templates."'),
    template: {
      '#metadata':: d.obj(help="\"metadata is the standard object's metadata.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\""),
      metadata: {
        '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { template+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { template+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { template+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { template+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help='"spec is the specification of the desired behavior of the machine.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"'),
      spec: {
        '#bootstrap':: d.obj(help='"bootstrap is a reference to a local struct which encapsulates\\nfields to configure the Machine’s bootstrapping mechanism."'),
        bootstrap: {
          '#configRef':: d.obj(help='"configRef is a reference to a bootstrap provider-specific resource\\nthat holds configuration details. The reference is optional to\\nallow users/operators to specify Bootstrap.DataSecretName without\\nthe need of a controller."'),
          configRef: {
            '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { apiVersion: apiVersion } } } } } },
            '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { fieldPath: fieldPath } } } } } },
            '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { kind: kind } } } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { name: name } } } } } },
            '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { namespace: namespace } } } } } },
            '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
            withResourceVersion(resourceVersion): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { resourceVersion: resourceVersion } } } } } },
            '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
            withUid(uid): { spec+: { template+: { spec+: { bootstrap+: { configRef+: { uid: uid } } } } } },
          },
          '#withDataSecretName':: d.fn(help='"dataSecretName is the name of the secret that stores the bootstrap data script.\\nIf nil, the Machine should remain in the Pending state."', args=[d.arg(name='dataSecretName', type=d.T.string)]),
          withDataSecretName(dataSecretName): { spec+: { template+: { spec+: { bootstrap+: { dataSecretName: dataSecretName } } } } },
        },
        '#infrastructureRef':: d.obj(help='"infrastructureRef is a required reference to a custom resource\\noffered by an infrastructure provider."'),
        infrastructureRef: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { spec+: { template+: { spec+: { infrastructureRef+: { apiVersion: apiVersion } } } } },
          '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { spec+: { template+: { spec+: { infrastructureRef+: { fieldPath: fieldPath } } } } },
          '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { template+: { spec+: { infrastructureRef+: { kind: kind } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { template+: { spec+: { infrastructureRef+: { name: name } } } } },
          '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { spec+: { template+: { spec+: { infrastructureRef+: { namespace: namespace } } } } },
          '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
          withResourceVersion(resourceVersion): { spec+: { template+: { spec+: { infrastructureRef+: { resourceVersion: resourceVersion } } } } },
          '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { spec+: { template+: { spec+: { infrastructureRef+: { uid: uid } } } } },
        },
        '#readinessGates':: d.obj(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. by Cluster API control plane providers to extend the semantic of the\\nReady condition for the Machine they control, like the kubeadm control provider adding ReadinessGates\\nfor the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\\n\\nAnother example are external controllers, e.g. responsible to install special software/hardware on the Machines;\\nthey can include the status of those components with a new condition and add this condition to ReadinessGates.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: In case readinessGates conditions start with the APIServer, ControllerManager, Scheduler prefix, and all those\\nreadiness gates condition are reporting the same message, when computing the Machine's Ready condition those\\nreadinessGates will be replaced by a single entry reporting \\\"Control plane components: \\\" + message.\\nThis helps to improve readability of conditions bubbling up to the Machine's owner resource / to the Cluster).\""),
        readinessGates: {
          '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Machine's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
          withConditionType(conditionType): { conditionType: conditionType },
          '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this readinessGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
          withPolarity(polarity): { polarity: polarity },
        },
        '#withClusterName':: d.fn(help='"clusterName is the name of the Cluster this object belongs to."', args=[d.arg(name='clusterName', type=d.T.string)]),
        withClusterName(clusterName): { spec+: { template+: { spec+: { clusterName: clusterName } } } },
        '#withFailureDomain':: d.fn(help='"failureDomain is the failure domain the machine will be created in.\\nMust match a key in the FailureDomains map stored on the cluster object."', args=[d.arg(name='failureDomain', type=d.T.string)]),
        withFailureDomain(failureDomain): { spec+: { template+: { spec+: { failureDomain: failureDomain } } } },
        '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
        withNodeDeletionTimeout(nodeDeletionTimeout): { spec+: { template+: { spec+: { nodeDeletionTimeout: nodeDeletionTimeout } } } },
        '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`"', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
        withNodeDrainTimeout(nodeDrainTimeout): { spec+: { template+: { spec+: { nodeDrainTimeout: nodeDrainTimeout } } } },
        '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
        withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { spec+: { template+: { spec+: { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout } } } },
        '#withProviderID':: d.fn(help='"providerID is the identification ID of the machine provided by the provider.\\nThis field must match the provider ID as seen on the node object corresponding to this machine.\\nThis field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler\\nwith cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out\\nmachines at provider which could not get registered as Kubernetes nodes. With cluster-api as a\\ngeneric out-of-tree provider for autoscaler, this field is required by autoscaler to be\\nable to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver\\nand then a comparison is done to find out unregistered machines and are marked for delete.\\nThis field will be set by the actuators and consumed by higher level entities like autoscaler that will\\nbe interfacing with cluster-api as generic provider."', args=[d.arg(name='providerID', type=d.T.string)]),
        withProviderID(providerID): { spec+: { template+: { spec+: { providerID: providerID } } } },
        '#withReadinessGates':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. by Cluster API control plane providers to extend the semantic of the\\nReady condition for the Machine they control, like the kubeadm control provider adding ReadinessGates\\nfor the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\\n\\nAnother example are external controllers, e.g. responsible to install special software/hardware on the Machines;\\nthey can include the status of those components with a new condition and add this condition to ReadinessGates.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: In case readinessGates conditions start with the APIServer, ControllerManager, Scheduler prefix, and all those\\nreadiness gates condition are reporting the same message, when computing the Machine's Ready condition those\\nreadinessGates will be replaced by a single entry reporting \\\"Control plane components: \\\" + message.\\nThis helps to improve readability of conditions bubbling up to the Machine's owner resource / to the Cluster).\"", args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGates(readinessGates): { spec+: { template+: { spec+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } },
        '#withReadinessGatesMixin':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. by Cluster API control plane providers to extend the semantic of the\\nReady condition for the Machine they control, like the kubeadm control provider adding ReadinessGates\\nfor the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\\n\\nAnother example are external controllers, e.g. responsible to install special software/hardware on the Machines;\\nthey can include the status of those components with a new condition and add this condition to ReadinessGates.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: In case readinessGates conditions start with the APIServer, ControllerManager, Scheduler prefix, and all those\\nreadiness gates condition are reporting the same message, when computing the Machine's Ready condition those\\nreadinessGates will be replaced by a single entry reporting \\\"Control plane components: \\\" + message.\\nThis helps to improve readability of conditions bubbling up to the Machine's owner resource / to the Cluster).\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGatesMixin(readinessGates): { spec+: { template+: { spec+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } },
        '#withVersion':: d.fn(help='"version defines the desired Kubernetes version.\\nThis field is meant to be optionally used by bootstrap providers."', args=[d.arg(name='version', type=d.T.string)]),
        withVersion(version): { spec+: { template+: { spec+: { version: version } } } },
      },
    },
    '#withClusterName':: d.fn(help='"clusterName is the name of the Cluster this object belongs to."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { spec+: { clusterName: clusterName } },
    '#withDeletePolicy':: d.fn(help='"deletePolicy defines the policy used to identify nodes to delete when downscaling.\\nDefaults to \\"Random\\".  Valid values are \\"Random, \\"Newest\\", \\"Oldest\\', args=[d.arg(name='deletePolicy', type=d.T.string)]),
    withDeletePolicy(deletePolicy): { spec+: { deletePolicy: deletePolicy } },
    '#withMinReadySeconds':: d.fn(help='"minReadySeconds is the minimum number of seconds for which a Node for a newly created machine should be ready before considering the replica available.\\nDefaults to 0 (machine will be considered available as soon as the Node is ready)"', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
    withMinReadySeconds(minReadySeconds): { spec+: { minReadySeconds: minReadySeconds } },
    '#withReplicas':: d.fn(help="\"replicas is the number of desired replicas.\\nThis is a pointer to distinguish between explicit zero and unspecified.\\n\\nDefaults to:\\n* if the Kubernetes autoscaler min size and max size annotations are set:\\n  - if it's a new MachineSet, use min size\\n  - if the replicas field of the old MachineSet is \u003c min size, use min size\\n  - if the replicas field of the old MachineSet is \u003e max size, use max size\\n  - if the replicas field of the old MachineSet is in the (min size, max size) range, keep the value from the oldMS\\n* otherwise use 1\\nNote: Defaulting will be run whenever the replicas field is not set:\\n* A new MachineSet is created with replicas not set.\\n* On an existing MachineSet the replicas field was first set and is now unset.\\nThose cases are especially relevant for the following Kubernetes autoscaler use cases:\\n* A new MachineSet is created and replicas should be managed by the autoscaler\\n* An existing MachineSet which initially wasn't controlled by the autoscaler\\n  should be later controlled by the autoscaler\"", args=[d.arg(name='replicas', type=d.T.integer)]),
    withReplicas(replicas): { spec+: { replicas: replicas } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
