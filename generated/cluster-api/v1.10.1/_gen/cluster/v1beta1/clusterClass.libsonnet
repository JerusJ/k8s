{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='clusterClass', url='', help='"ClusterClass is a template which can be used to create managed topologies."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of ClusterClass', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'cluster.x-k8s.io/v1beta1',
    kind: 'ClusterClass',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"spec is the desired state of ClusterClass."'),
  spec: {
    '#availabilityGates':: d.obj(help='"availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\\n\\nNOTE: this field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster is using this ClusterClass, and this Cluster defines a custom list of availabilityGates,\\nsuch list overrides availabilityGates defined in this field."'),
    availabilityGates: {
      '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Cluster's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as availability gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
      withConditionType(conditionType): { conditionType: conditionType },
      '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this availabilityGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
      withPolarity(polarity): { polarity: polarity },
    },
    '#controlPlane':: d.obj(help='"controlPlane is a reference to a local struct that holds the details\\nfor provisioning the Control Plane for the Cluster."'),
    controlPlane: {
      '#machineHealthCheck':: d.obj(help='"machineHealthCheck defines a MachineHealthCheck for this ControlPlaneClass.\\nThis field is supported if and only if the ControlPlane provider template\\nreferenced above is Machine based and supports setting replicas."'),
      machineHealthCheck: {
        '#remediationTemplate':: d.obj(help='"remediationTemplate is a reference to a remediation template\\nprovided by an infrastructure provider.\\n\\nThis field is completely optional, when filled, the MachineHealthCheck controller\\ncreates a new object from the template referenced and hands off remediation of the machine to\\na controller that lives outside of Cluster API."'),
        remediationTemplate: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { apiVersion: apiVersion } } } } },
          '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { fieldPath: fieldPath } } } } },
          '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { kind: kind } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { name: name } } } } },
          '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { namespace: namespace } } } } },
          '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
          withResourceVersion(resourceVersion): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { resourceVersion: resourceVersion } } } } },
          '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { spec+: { controlPlane+: { machineHealthCheck+: { remediationTemplate+: { uid: uid } } } } },
        },
        '#unhealthyConditions':: d.obj(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."'),
        unhealthyConditions: {
          '#withTimeout':: d.fn(help='"timeout is the duration that a node must be in a given status for,\\nafter which the node is considered unhealthy.\\nFor example, with a value of \\"1h\\", the node must match the status\\nfor at least 1 hour before being considered unhealthy."', args=[d.arg(name='timeout', type=d.T.string)]),
          withTimeout(timeout): { timeout: timeout },
          '#withType':: d.fn(help='"type of Node condition"', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#withMaxUnhealthy':: d.fn(help='"maxUnhealthy specifies the maximum number of unhealthy machines allowed.\\nAny further remediation is only allowed if at most \\"maxUnhealthy\\" machines selected by\\n\\"selector\\" are not healthy."', args=[d.arg(name='maxUnhealthy', type=d.T.any)]),
        withMaxUnhealthy(maxUnhealthy): { spec+: { controlPlane+: { machineHealthCheck+: { maxUnhealthy: maxUnhealthy } } } },
        '#withNodeStartupTimeout':: d.fn(help="\"nodeStartupTimeout allows to set the maximum time for MachineHealthCheck\\nto consider a Machine unhealthy if a corresponding Node isn't associated\\nthrough a `Spec.ProviderID` field.\\n\\nThe duration set in this field is compared to the greatest of:\\n- Cluster's infrastructure ready condition timestamp (if and when available)\\n- Control Plane's initialized condition timestamp (if and when available)\\n- Machine's infrastructure ready condition timestamp (if and when available)\\n- Machine's metadata creation timestamp\\n\\nDefaults to 10 minutes.\\nIf you wish to disable this feature, set the value explicitly to 0.\"", args=[d.arg(name='nodeStartupTimeout', type=d.T.string)]),
        withNodeStartupTimeout(nodeStartupTimeout): { spec+: { controlPlane+: { machineHealthCheck+: { nodeStartupTimeout: nodeStartupTimeout } } } },
        '#withUnhealthyConditions':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
        withUnhealthyConditions(unhealthyConditions): { spec+: { controlPlane+: { machineHealthCheck+: { unhealthyConditions: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } } } },
        '#withUnhealthyConditionsMixin':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
        withUnhealthyConditionsMixin(unhealthyConditions): { spec+: { controlPlane+: { machineHealthCheck+: { unhealthyConditions+: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } } } },
        '#withUnhealthyRange':: d.fn(help='"unhealthyRange specifies the range of unhealthy machines allowed.\\nAny further remediation is only allowed if the number of machines selected by \\"selector\\" as not healthy\\nis within the range of \\"unhealthyRange\\". Takes precedence over maxUnhealthy.\\nEg. \\"[3-5]\\" - This means that remediation will be allowed only when:\\n(a) there are at least 3 unhealthy machines (and)\\n(b) there are at most 5 unhealthy machines"', args=[d.arg(name='unhealthyRange', type=d.T.string)]),
        withUnhealthyRange(unhealthyRange): { spec+: { controlPlane+: { machineHealthCheck+: { unhealthyRange: unhealthyRange } } } },
      },
      '#machineInfrastructure':: d.obj(help='"machineInfrastructure defines the metadata and infrastructure information\\nfor control plane machines.\\n\\nThis field is supported if and only if the control plane provider template\\nreferenced above is Machine based and supports setting replicas."'),
      machineInfrastructure: {
        '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
        ref: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { apiVersion: apiVersion } } } } },
          '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { fieldPath: fieldPath } } } } },
          '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { kind: kind } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { name: name } } } } },
          '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { namespace: namespace } } } } },
          '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
          withResourceVersion(resourceVersion): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { resourceVersion: resourceVersion } } } } },
          '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { spec+: { controlPlane+: { machineInfrastructure+: { ref+: { uid: uid } } } } },
        },
      },
      '#metadata':: d.obj(help='"metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane\\nif the ControlPlaneTemplate referenced is machine based. If not, it is applied only to the\\nControlPlane.\\nAt runtime this metadata is merged with the corresponding metadata from the topology.\\n\\nThis field is supported if and only if the control plane provider template\\nreferenced is Machine based."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { controlPlane+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { controlPlane+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { controlPlane+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { controlPlane+: { metadata+: { labels+: labels } } } },
      },
      '#namingStrategy':: d.obj(help='"namingStrategy allows changing the naming pattern used when creating the control plane provider object."'),
      namingStrategy: {
        '#withTemplate':: d.fn(help='"template defines the template to use for generating the name of the ControlPlane object.\\nIf not defined, it will fallback to `{{ .cluster.name }}-{{ .random }}`.\\nIf the templated string exceeds 63 characters, it will be trimmed to 58 characters and will\\nget concatenated with a random suffix of length 5.\\nThe templating mechanism provides the following arguments:\\n* `.cluster.name`: The name of the cluster object.\\n* `.random`: A random alphanumeric string, without vowels, of length 5."', args=[d.arg(name='template', type=d.T.string)]),
        withTemplate(template): { spec+: { controlPlane+: { namingStrategy+: { template: template } } } },
      },
      '#readinessGates':: d.obj(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster defines a custom list of readinessGates for the control plane,\\nsuch list overrides readinessGates defined in this field.\\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\""),
      readinessGates: {
        '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Machine's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
        withConditionType(conditionType): { conditionType: conditionType },
        '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this readinessGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
        withPolarity(polarity): { polarity: polarity },
      },
      '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
      ref: {
        '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
        withApiVersion(apiVersion): { spec+: { controlPlane+: { ref+: { apiVersion: apiVersion } } } },
        '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
        withFieldPath(fieldPath): { spec+: { controlPlane+: { ref+: { fieldPath: fieldPath } } } },
        '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { spec+: { controlPlane+: { ref+: { kind: kind } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { controlPlane+: { ref+: { name: name } } } },
        '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { controlPlane+: { ref+: { namespace: namespace } } } },
        '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
        withResourceVersion(resourceVersion): { spec+: { controlPlane+: { ref+: { resourceVersion: resourceVersion } } } },
        '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
        withUid(uid): { spec+: { controlPlane+: { ref+: { uid: uid } } } },
      },
      '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds.\\nNOTE: This value can be overridden while defining a Cluster.Topology."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
      withNodeDeletionTimeout(nodeDeletionTimeout): { spec+: { controlPlane+: { nodeDeletionTimeout: nodeDeletionTimeout } } },
      '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`\\nNOTE: This value can be overridden while defining a Cluster.Topology."', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
      withNodeDrainTimeout(nodeDrainTimeout): { spec+: { controlPlane+: { nodeDrainTimeout: nodeDrainTimeout } } },
      '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.\\nNOTE: This value can be overridden while defining a Cluster.Topology."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
      withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { spec+: { controlPlane+: { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout } } },
      '#withReadinessGates':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster defines a custom list of readinessGates for the control plane,\\nsuch list overrides readinessGates defined in this field.\\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\"", args=[d.arg(name='readinessGates', type=d.T.array)]),
      withReadinessGates(readinessGates): { spec+: { controlPlane+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
      '#withReadinessGatesMixin':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster defines a custom list of readinessGates for the control plane,\\nsuch list overrides readinessGates defined in this field.\\nNOTE: Specific control plane provider implementations might automatically extend the list of readinessGates;\\ne.g. the kubeadm control provider adds ReadinessGates for the APIServerPodHealthy, SchedulerPodHealthy conditions, etc.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='readinessGates', type=d.T.array)]),
      withReadinessGatesMixin(readinessGates): { spec+: { controlPlane+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
    },
    '#infrastructure':: d.obj(help='"infrastructure is a reference to a provider-specific template that holds\\nthe details for provisioning infrastructure specific cluster\\nfor the underlying provider.\\nThe underlying provider is responsible for the implementation\\nof the template to an infrastructure cluster."'),
    infrastructure: {
      '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
      ref: {
        '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
        withApiVersion(apiVersion): { spec+: { infrastructure+: { ref+: { apiVersion: apiVersion } } } },
        '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
        withFieldPath(fieldPath): { spec+: { infrastructure+: { ref+: { fieldPath: fieldPath } } } },
        '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { spec+: { infrastructure+: { ref+: { kind: kind } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { infrastructure+: { ref+: { name: name } } } },
        '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { infrastructure+: { ref+: { namespace: namespace } } } },
        '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
        withResourceVersion(resourceVersion): { spec+: { infrastructure+: { ref+: { resourceVersion: resourceVersion } } } },
        '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
        withUid(uid): { spec+: { infrastructure+: { ref+: { uid: uid } } } },
      },
    },
    '#infrastructureNamingStrategy':: d.obj(help='"infrastructureNamingStrategy allows changing the naming pattern used when creating the infrastructure object."'),
    infrastructureNamingStrategy: {
      '#withTemplate':: d.fn(help='"template defines the template to use for generating the name of the Infrastructure object.\\nIf not defined, it will fallback to `{{ .cluster.name }}-{{ .random }}`.\\nIf the templated string exceeds 63 characters, it will be trimmed to 58 characters and will\\nget concatenated with a random suffix of length 5.\\nThe templating mechanism provides the following arguments:\\n* `.cluster.name`: The name of the cluster object.\\n* `.random`: A random alphanumeric string, without vowels, of length 5."', args=[d.arg(name='template', type=d.T.string)]),
      withTemplate(template): { spec+: { infrastructureNamingStrategy+: { template: template } } },
    },
    '#patches':: d.obj(help='"patches defines the patches which are applied to customize\\nreferenced templates of a ClusterClass.\\nNote: Patches will be applied in the order of the array."'),
    patches: {
      '#definitions':: d.obj(help='"definitions define inline patches.\\nNote: Patches will be applied in the order of the array.\\nNote: Exactly one of Definitions or External must be set."'),
      definitions: {
        '#jsonPatches':: d.obj(help='"jsonPatches defines the patches which should be applied on the templates\\nmatching the selector.\\nNote: Patches will be applied in the order of the array."'),
        jsonPatches: {
          '#valueFrom':: d.obj(help='"valueFrom defines the value of the patch.\\nNote: Either Value or ValueFrom is required for add and replace\\noperations. Only one of them is allowed to be set at the same time."'),
          valueFrom: {
            '#withTemplate':: d.fn(help='"template is the Go template to be used to calculate the value.\\nA template can reference variables defined in .spec.variables and builtin variables.\\nNote: The template must evaluate to a valid YAML or JSON value."', args=[d.arg(name='template', type=d.T.string)]),
            withTemplate(template): { valueFrom+: { template: template } },
            '#withVariable':: d.fn(help='"variable is the variable to be used as value.\\nVariable can be one of the variables defined in .spec.variables or a builtin variable."', args=[d.arg(name='variable', type=d.T.string)]),
            withVariable(variable): { valueFrom+: { variable: variable } },
          },
          '#withOp':: d.fn(help='"op defines the operation of the patch.\\nNote: Only `add`, `replace` and `remove` are supported."', args=[d.arg(name='op', type=d.T.string)]),
          withOp(op): { op: op },
          '#withPath':: d.fn(help='"path defines the path of the patch.\\nNote: Only the spec of a template can be patched, thus the path has to start with /spec/.\\nNote: For now the only allowed array modifications are `append` and `prepend`, i.e.:\\n* for op: `add`: only index 0 (prepend) and - (append) are allowed\\n* for op: `replace` or `remove`: no indexes are allowed"', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
          '#withValue':: d.fn(help='"value defines the value of the patch.\\nNote: Either Value or ValueFrom is required for add and replace\\noperations. Only one of them is allowed to be set at the same time.\\nNote: We have to use apiextensionsv1.JSON instead of our JSON type,\\nbecause controller-tools has a hard-coded schema for apiextensionsv1.JSON\\nwhich cannot be produced by another type (unset type field).\\nRef: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111"', args=[d.arg(name='value', type=d.T.any)]),
          withValue(value): { value: value },
        },
        '#selector':: d.obj(help='"selector defines on which templates the patch should be applied."'),
        selector: {
          '#matchResources':: d.obj(help='"matchResources selects templates based on where they are referenced."'),
          matchResources: {
            '#machineDeploymentClass':: d.obj(help='"machineDeploymentClass selects templates referenced in specific MachineDeploymentClasses in\\n.spec.workers.machineDeployments."'),
            machineDeploymentClass: {
              '#withNames':: d.fn(help='"names selects templates by class names."', args=[d.arg(name='names', type=d.T.array)]),
              withNames(names): { selector+: { matchResources+: { machineDeploymentClass+: { names: if std.isArray(v=names) then names else [names] } } } },
              '#withNamesMixin':: d.fn(help='"names selects templates by class names."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='names', type=d.T.array)]),
              withNamesMixin(names): { selector+: { matchResources+: { machineDeploymentClass+: { names+: if std.isArray(v=names) then names else [names] } } } },
            },
            '#machinePoolClass':: d.obj(help='"machinePoolClass selects templates referenced in specific MachinePoolClasses in\\n.spec.workers.machinePools."'),
            machinePoolClass: {
              '#withNames':: d.fn(help='"names selects templates by class names."', args=[d.arg(name='names', type=d.T.array)]),
              withNames(names): { selector+: { matchResources+: { machinePoolClass+: { names: if std.isArray(v=names) then names else [names] } } } },
              '#withNamesMixin':: d.fn(help='"names selects templates by class names."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='names', type=d.T.array)]),
              withNamesMixin(names): { selector+: { matchResources+: { machinePoolClass+: { names+: if std.isArray(v=names) then names else [names] } } } },
            },
            '#withControlPlane':: d.fn(help='"controlPlane selects templates referenced in .spec.ControlPlane.\\nNote: this will match the controlPlane and also the controlPlane\\nmachineInfrastructure (depending on the kind and apiVersion)."', args=[d.arg(name='controlPlane', type=d.T.boolean)]),
            withControlPlane(controlPlane): { selector+: { matchResources+: { controlPlane: controlPlane } } },
            '#withInfrastructureCluster':: d.fn(help='"infrastructureCluster selects templates referenced in .spec.infrastructure."', args=[d.arg(name='infrastructureCluster', type=d.T.boolean)]),
            withInfrastructureCluster(infrastructureCluster): { selector+: { matchResources+: { infrastructureCluster: infrastructureCluster } } },
          },
          '#withApiVersion':: d.fn(help='"apiVersion filters templates by apiVersion."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { selector+: { apiVersion: apiVersion } },
          '#withKind':: d.fn(help='"kind filters templates by kind."', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { selector+: { kind: kind } },
        },
        '#withJsonPatches':: d.fn(help='"jsonPatches defines the patches which should be applied on the templates\\nmatching the selector.\\nNote: Patches will be applied in the order of the array."', args=[d.arg(name='jsonPatches', type=d.T.array)]),
        withJsonPatches(jsonPatches): { jsonPatches: if std.isArray(v=jsonPatches) then jsonPatches else [jsonPatches] },
        '#withJsonPatchesMixin':: d.fn(help='"jsonPatches defines the patches which should be applied on the templates\\nmatching the selector.\\nNote: Patches will be applied in the order of the array."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jsonPatches', type=d.T.array)]),
        withJsonPatchesMixin(jsonPatches): { jsonPatches+: if std.isArray(v=jsonPatches) then jsonPatches else [jsonPatches] },
      },
      '#external':: d.obj(help='"external defines an external patch.\\nNote: Exactly one of Definitions or External must be set."'),
      external: {
        '#withDiscoverVariablesExtension':: d.fn(help='"discoverVariablesExtension references an extension which is called to discover variables."', args=[d.arg(name='discoverVariablesExtension', type=d.T.string)]),
        withDiscoverVariablesExtension(discoverVariablesExtension): { external+: { discoverVariablesExtension: discoverVariablesExtension } },
        '#withGenerateExtension':: d.fn(help='"generateExtension references an extension which is called to generate patches."', args=[d.arg(name='generateExtension', type=d.T.string)]),
        withGenerateExtension(generateExtension): { external+: { generateExtension: generateExtension } },
        '#withSettings':: d.fn(help='"settings defines key value pairs to be passed to the extensions.\\nValues defined here take precedence over the values defined in the\\ncorresponding ExtensionConfig."', args=[d.arg(name='settings', type=d.T.object)]),
        withSettings(settings): { external+: { settings: settings } },
        '#withSettingsMixin':: d.fn(help='"settings defines key value pairs to be passed to the extensions.\\nValues defined here take precedence over the values defined in the\\ncorresponding ExtensionConfig."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='settings', type=d.T.object)]),
        withSettingsMixin(settings): { external+: { settings+: settings } },
        '#withValidateExtension':: d.fn(help='"validateExtension references an extension which is called to validate the topology."', args=[d.arg(name='validateExtension', type=d.T.string)]),
        withValidateExtension(validateExtension): { external+: { validateExtension: validateExtension } },
      },
      '#withDefinitions':: d.fn(help='"definitions define inline patches.\\nNote: Patches will be applied in the order of the array.\\nNote: Exactly one of Definitions or External must be set."', args=[d.arg(name='definitions', type=d.T.array)]),
      withDefinitions(definitions): { definitions: if std.isArray(v=definitions) then definitions else [definitions] },
      '#withDefinitionsMixin':: d.fn(help='"definitions define inline patches.\\nNote: Patches will be applied in the order of the array.\\nNote: Exactly one of Definitions or External must be set."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='definitions', type=d.T.array)]),
      withDefinitionsMixin(definitions): { definitions+: if std.isArray(v=definitions) then definitions else [definitions] },
      '#withDescription':: d.fn(help='"description is a human-readable description of this patch."', args=[d.arg(name='description', type=d.T.string)]),
      withDescription(description): { description: description },
      '#withEnabledIf':: d.fn(help='"enabledIf is a Go template to be used to calculate if a patch should be enabled.\\nIt can reference variables defined in .spec.variables and builtin variables.\\nThe patch will be enabled if the template evaluates to `true`, otherwise it will\\nbe disabled.\\nIf EnabledIf is not set, the patch will be enabled per default."', args=[d.arg(name='enabledIf', type=d.T.string)]),
      withEnabledIf(enabledIf): { enabledIf: enabledIf },
      '#withName':: d.fn(help='"name of the patch."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
    },
    '#variables':: d.obj(help='"variables defines the variables which can be configured\\nin the Cluster topology and are then used in patches."'),
    variables: {
      '#metadata':: d.obj(help='"metadata is the metadata of a variable.\\nIt can be used to add additional data for higher level tools to\\na ClusterClassVariable.\\n\\nDeprecated: This field is deprecated and is going to be removed in the next apiVersion. Please use XMetadata in JSONSchemaProps instead."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map that can be used to store and\\nretrieve arbitrary metadata.\\nThey are not queryable."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { metadata+: { annotations: annotations } },
        '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map that can be used to store and\\nretrieve arbitrary metadata.\\nThey are not queryable."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
        '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) variables."', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { metadata+: { labels: labels } },
        '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) variables."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { metadata+: { labels+: labels } },
      },
      '#schema':: d.obj(help='"schema defines the schema of the variable."'),
      schema: {
        '#openAPIV3Schema':: d.obj(help='"openAPIV3Schema defines the schema of a variable via OpenAPI v3\\nschema. The schema is a subset of the schema used in\\nKubernetes CRDs."'),
        openAPIV3Schema: {
          '#withAdditionalProperties':: d.fn(help='"additionalProperties specifies the schema of values in a map (keys are always strings).\\nNOTE: Can only be set if type is object.\\nNOTE: AdditionalProperties is mutually exclusive with Properties.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='additionalProperties', type=d.T.any)]),
          withAdditionalProperties(additionalProperties): { schema+: { openAPIV3Schema+: { additionalProperties: additionalProperties } } },
          '#withAllOf':: d.fn(help='"allOf specifies that the variable must validate against all of the subschemas in the array.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='allOf', type=d.T.any)]),
          withAllOf(allOf): { schema+: { openAPIV3Schema+: { allOf: allOf } } },
          '#withAnyOf':: d.fn(help='"anyOf specifies that the variable must validate against one or more of the subschemas in the array.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='anyOf', type=d.T.any)]),
          withAnyOf(anyOf): { schema+: { openAPIV3Schema+: { anyOf: anyOf } } },
          '#withDefault':: d.fn(help='"default is the default value of the variable.\\nNOTE: Can be set for all types."', args=[d.arg(name='default', type=d.T.any)]),
          withDefault(default): { schema+: { openAPIV3Schema+: { default: default } } },
          '#withDescription':: d.fn(help='"description is a human-readable description of this variable."', args=[d.arg(name='description', type=d.T.string)]),
          withDescription(description): { schema+: { openAPIV3Schema+: { description: description } } },
          '#withEnum':: d.fn(help='"enum is the list of valid values of the variable.\\nNOTE: Can be set for all types."', args=[d.arg(name='enum', type=d.T.array)]),
          withEnum(enum): { schema+: { openAPIV3Schema+: { enum: if std.isArray(v=enum) then enum else [enum] } } },
          '#withEnumMixin':: d.fn(help='"enum is the list of valid values of the variable.\\nNOTE: Can be set for all types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='enum', type=d.T.array)]),
          withEnumMixin(enum): { schema+: { openAPIV3Schema+: { enum+: if std.isArray(v=enum) then enum else [enum] } } },
          '#withExample':: d.fn(help='"example is an example for this variable."', args=[d.arg(name='example', type=d.T.any)]),
          withExample(example): { schema+: { openAPIV3Schema+: { example: example } } },
          '#withExclusiveMaximum':: d.fn(help='"exclusiveMaximum specifies if the Maximum is exclusive.\\nNOTE: Can only be set if type is integer or number."', args=[d.arg(name='exclusiveMaximum', type=d.T.boolean)]),
          withExclusiveMaximum(exclusiveMaximum): { schema+: { openAPIV3Schema+: { exclusiveMaximum: exclusiveMaximum } } },
          '#withExclusiveMinimum':: d.fn(help='"exclusiveMinimum specifies if the Minimum is exclusive.\\nNOTE: Can only be set if type is integer or number."', args=[d.arg(name='exclusiveMinimum', type=d.T.boolean)]),
          withExclusiveMinimum(exclusiveMinimum): { schema+: { openAPIV3Schema+: { exclusiveMinimum: exclusiveMinimum } } },
          '#withFormat':: d.fn(help="\"format is an OpenAPI v3 format string. Unknown formats are ignored.\\nFor a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using)\\nhttps://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go\\nNOTE: Can only be set if type is string.\"", args=[d.arg(name='format', type=d.T.string)]),
          withFormat(format): { schema+: { openAPIV3Schema+: { format: format } } },
          '#withItems':: d.fn(help='"items specifies fields of an array.\\nNOTE: Can only be set if type is array.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='items', type=d.T.any)]),
          withItems(items): { schema+: { openAPIV3Schema+: { items: items } } },
          '#withMaxItems':: d.fn(help='"maxItems is the max length of an array variable.\\nNOTE: Can only be set if type is array."', args=[d.arg(name='maxItems', type=d.T.integer)]),
          withMaxItems(maxItems): { schema+: { openAPIV3Schema+: { maxItems: maxItems } } },
          '#withMaxLength':: d.fn(help='"maxLength is the max length of a string variable.\\nNOTE: Can only be set if type is string."', args=[d.arg(name='maxLength', type=d.T.integer)]),
          withMaxLength(maxLength): { schema+: { openAPIV3Schema+: { maxLength: maxLength } } },
          '#withMaxProperties':: d.fn(help='"maxProperties is the maximum amount of entries in a map or properties in an object.\\nNOTE: Can only be set if type is object."', args=[d.arg(name='maxProperties', type=d.T.integer)]),
          withMaxProperties(maxProperties): { schema+: { openAPIV3Schema+: { maxProperties: maxProperties } } },
          '#withMaximum':: d.fn(help='"maximum is the maximum of an integer or number variable.\\nIf ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum.\\nIf ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum.\\nNOTE: Can only be set if type is integer or number."', args=[d.arg(name='maximum', type=d.T.integer)]),
          withMaximum(maximum): { schema+: { openAPIV3Schema+: { maximum: maximum } } },
          '#withMinItems':: d.fn(help='"minItems is the min length of an array variable.\\nNOTE: Can only be set if type is array."', args=[d.arg(name='minItems', type=d.T.integer)]),
          withMinItems(minItems): { schema+: { openAPIV3Schema+: { minItems: minItems } } },
          '#withMinLength':: d.fn(help='"minLength is the min length of a string variable.\\nNOTE: Can only be set if type is string."', args=[d.arg(name='minLength', type=d.T.integer)]),
          withMinLength(minLength): { schema+: { openAPIV3Schema+: { minLength: minLength } } },
          '#withMinProperties':: d.fn(help='"minProperties is the minimum amount of entries in a map or properties in an object.\\nNOTE: Can only be set if type is object."', args=[d.arg(name='minProperties', type=d.T.integer)]),
          withMinProperties(minProperties): { schema+: { openAPIV3Schema+: { minProperties: minProperties } } },
          '#withMinimum':: d.fn(help='"minimum is the minimum of an integer or number variable.\\nIf ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum.\\nIf ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum.\\nNOTE: Can only be set if type is integer or number."', args=[d.arg(name='minimum', type=d.T.integer)]),
          withMinimum(minimum): { schema+: { openAPIV3Schema+: { minimum: minimum } } },
          '#withNot':: d.fn(help='"not specifies that the variable must not validate against the subschema.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='not', type=d.T.any)]),
          withNot(not): { schema+: { openAPIV3Schema+: { not: not } } },
          '#withOneOf':: d.fn(help='"oneOf specifies that the variable must validate against exactly one of the subschemas in the array.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='oneOf', type=d.T.any)]),
          withOneOf(oneOf): { schema+: { openAPIV3Schema+: { oneOf: oneOf } } },
          '#withPattern':: d.fn(help='"pattern is the regex which a string variable must match.\\nNOTE: Can only be set if type is string."', args=[d.arg(name='pattern', type=d.T.string)]),
          withPattern(pattern): { schema+: { openAPIV3Schema+: { pattern: pattern } } },
          '#withProperties':: d.fn(help='"properties specifies fields of an object.\\nNOTE: Can only be set if type is object.\\nNOTE: Properties is mutually exclusive with AdditionalProperties.\\nNOTE: This field uses PreserveUnknownFields and Schemaless,\\nbecause recursive validation is not possible."', args=[d.arg(name='properties', type=d.T.any)]),
          withProperties(properties): { schema+: { openAPIV3Schema+: { properties: properties } } },
          '#withRequired':: d.fn(help='"required specifies which fields of an object are required.\\nNOTE: Can only be set if type is object."', args=[d.arg(name='required', type=d.T.array)]),
          withRequired(required): { schema+: { openAPIV3Schema+: { required: if std.isArray(v=required) then required else [required] } } },
          '#withRequiredMixin':: d.fn(help='"required specifies which fields of an object are required.\\nNOTE: Can only be set if type is object."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='required', type=d.T.array)]),
          withRequiredMixin(required): { schema+: { openAPIV3Schema+: { required+: if std.isArray(v=required) then required else [required] } } },
          '#withType':: d.fn(help='"type is the type of the variable.\\nValid values are: object, array, string, integer, number or boolean."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { schema+: { openAPIV3Schema+: { type: type } } },
          '#withUniqueItems':: d.fn(help='"uniqueItems specifies if items in an array must be unique.\\nNOTE: Can only be set if type is array."', args=[d.arg(name='uniqueItems', type=d.T.boolean)]),
          withUniqueItems(uniqueItems): { schema+: { openAPIV3Schema+: { uniqueItems: uniqueItems } } },
          '#withX-Kubernetes-Int-Or-String':: d.fn(help='"x-kubernetes-int-or-string specifies that this value is\\neither an integer or a string. If this is true, an empty\\ntype is allowed and type as child of anyOf is permitted\\nif following one of the following patterns:\\n\\n1) anyOf:\\n   - type: integer\\n   - type: string\\n2) allOf:\\n   - anyOf:\\n     - type: integer\\n     - type: string\\n   - ... zero or more"', args=[d.arg(name='x_kubernetes_int_or_string', type=d.T.boolean)]),
          'withX-Kubernetes-Int-Or-String'(x_kubernetes_int_or_string): { schema+: { openAPIV3Schema+: { 'x-kubernetes-int-or-string': x_kubernetes_int_or_string } } },
          '#withX-Kubernetes-Preserve-Unknown-Fields':: d.fn(help='"x-kubernetes-preserve-unknown-fields allows setting fields in a variable object\\nwhich are not defined in the variable schema. This affects fields recursively,\\nexcept if nested properties or additionalProperties are specified in the schema."', args=[d.arg(name='x_kubernetes_preserve_unknown_fields', type=d.T.boolean)]),
          'withX-Kubernetes-Preserve-Unknown-Fields'(x_kubernetes_preserve_unknown_fields): { schema+: { openAPIV3Schema+: { 'x-kubernetes-preserve-unknown-fields': x_kubernetes_preserve_unknown_fields } } },
          '#withX-Kubernetes-Validations':: d.fn(help='"x-kubernetes-validations describes a list of validation rules written in the CEL expression language."', args=[d.arg(name='x_kubernetes_validations', type=d.T.array)]),
          'withX-Kubernetes-Validations'(x_kubernetes_validations): { schema+: { openAPIV3Schema+: { 'x-kubernetes-validations': if std.isArray(v=x_kubernetes_validations) then x_kubernetes_validations else [x_kubernetes_validations] } } },
          '#withX-Kubernetes-ValidationsMixin':: d.fn(help='"x-kubernetes-validations describes a list of validation rules written in the CEL expression language."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='x_kubernetes_validations', type=d.T.array)]),
          'withX-Kubernetes-ValidationsMixin'(x_kubernetes_validations): { schema+: { openAPIV3Schema+: { 'x-kubernetes-validations'+: if std.isArray(v=x_kubernetes_validations) then x_kubernetes_validations else [x_kubernetes_validations] } } },
          '#x-kubernetes-validations':: d.obj(help='"x-kubernetes-validations describes a list of validation rules written in the CEL expression language."'),
          'x-kubernetes-validations': {
            '#withFieldPath':: d.fn(help="\"fieldPath represents the field path returned when the validation fails.\\nIt must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field.\\ne.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo`\\nIf the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList`\\nIt does not support list numeric index.\\nIt supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info.\\nNumeric index of array is not supported.\\nFor field name which contains special characters, use `['specialName']` to refer the field name.\\ne.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`\"", args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { fieldPath: fieldPath },
            '#withMessage':: d.fn(help='"message represents the message displayed when validation fails. The message is required if the Rule contains\\nline breaks. The message must not contain line breaks.\\nIf unset, the message is \\"failed rule: {Rule}\\".\\ne.g. \\"must be a URL with the host matching spec.host\\', args=[d.arg(name='message', type=d.T.string)]),
            withMessage(message): { message: message },
            '#withMessageExpression':: d.fn(help='"messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.\\nSince messageExpression is used as a failure message, it must evaluate to a string.\\nIf both message and messageExpression are present on a rule, then messageExpression will be used if validation\\nfails. If messageExpression results in a runtime error, the validation failure message is produced\\nas if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string\\nthat contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset.\\nmessageExpression has access to all the same variables as the rule; the only difference is the return type.\\nExample:\\n\\"x must be less than max (\\"+string(self.max)+\\")\\', args=[d.arg(name='messageExpression', type=d.T.string)]),
            withMessageExpression(messageExpression): { messageExpression: messageExpression },
            '#withReason':: d.fn(help='"reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule.\\nThe currently supported reasons are: \\"FieldValueInvalid\\", \\"FieldValueForbidden\\", \\"FieldValueRequired\\", \\"FieldValueDuplicate\\".\\nIf not set, default to use \\"FieldValueInvalid\\".\\nAll future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid."', args=[d.arg(name='reason', type=d.T.string)]),
            withReason(reason): { reason: reason },
            '#withRule':: d.fn(help="\"rule represents the expression which will be evaluated by CEL.\\nref: https://github.com/google/cel-spec\\nThe Rule is scoped to the location of the x-kubernetes-validations extension in the schema.\\nThe `self` variable in the CEL expression is bound to the scoped value.\\nIf the Rule is scoped to an object with properties, the accessible properties of the object are field selectable\\nvia `self.field` and field presence can be checked via `has(self.field)`.\\nIf the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map\\nare accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map\\nare accessible via CEL macros and functions such as `self.all(...)`.\\nIf the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and\\nfunctions.\\nIf the Rule is scoped to a scalar, `self` is bound to the scalar value.\\nExamples:\\n- Rule scoped to a map of objects: {\\\"rule\\\": \\\"self.components['Widget'].priority \u003c 10\\\"}\\n- Rule scoped to a list of integers: {\\\"rule\\\": \\\"self.values.all(value, value \u003e= 0 \u0026\u0026 value \u003c 100)\\\"}\\n- Rule scoped to a string value: {\\\"rule\\\": \\\"self.startsWith('kube')\\\"}\\n\\nUnknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL\\nexpressions. This includes:\\n- Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields.\\n- Object properties where the property schema is of an \\\"unknown type\\\". An \\\"unknown type\\\" is recursively defined as:\\n  - A schema with no type and x-kubernetes-preserve-unknown-fields set to true\\n  - An array where the items schema is of an \\\"unknown type\\\"\\n  - An object where the additionalProperties schema is of an \\\"unknown type\\\"\\n\\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.\\nAccessible property names are escaped according to the following rules when accessed in the expression:\\n- '__' escapes to '__underscores__'\\n- '.' escapes to '__dot__'\\n- '-' escapes to '__dash__'\\n- '/' escapes to '__slash__'\\n- Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\\n\\t  \\\"true\\\", \\\"false\\\", \\\"null\\\", \\\"in\\\", \\\"as\\\", \\\"break\\\", \\\"const\\\", \\\"continue\\\", \\\"else\\\", \\\"for\\\", \\\"function\\\", \\\"if\\\",\\n\\t  \\\"import\\\", \\\"let\\\", \\\"loop\\\", \\\"package\\\", \\\"namespace\\\", \\\"return\\\".\\nExamples:\\n  - Rule accessing a property named \\\"namespace\\\": {\\\"rule\\\": \\\"self.__namespace__ \u003e 0\\\"}\\n  - Rule accessing a property named \\\"x-prop\\\": {\\\"rule\\\": \\\"self.x__dash__prop \u003e 0\\\"}\\n  - Rule accessing a property named \\\"redact__d\\\": {\\\"rule\\\": \\\"self.redact__underscores__d \u003e 0\\\"}\\n\\nIf `rule` makes use of the `oldSelf` variable it is implicitly a\\n`transition rule`.\\n\\nBy default, the `oldSelf` variable is the same type as `self`.\\n\\nTransition rules by default are applied only on UPDATE requests and are\\nskipped if an old value could not be found.\"", args=[d.arg(name='rule', type=d.T.string)]),
            withRule(rule): { rule: rule },
          },
          '#x-metadata':: d.obj(help='"x-metadata is the metadata of a variable or a nested field within a variable.\\nIt can be used to add additional data for higher level tools."'),
          'x-metadata': {
            '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map that can be used to store and\\nretrieve arbitrary metadata.\\nThey are not queryable."', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { schema+: { openAPIV3Schema+: { 'x-metadata'+: { annotations: annotations } } } },
            '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map that can be used to store and\\nretrieve arbitrary metadata.\\nThey are not queryable."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { schema+: { openAPIV3Schema+: { 'x-metadata'+: { annotations+: annotations } } } },
            '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) variables."', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { schema+: { openAPIV3Schema+: { 'x-metadata'+: { labels: labels } } } },
            '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) variables."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { schema+: { openAPIV3Schema+: { 'x-metadata'+: { labels+: labels } } } },
          },
        },
      },
      '#withName':: d.fn(help='"name of the variable."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withRequired':: d.fn(help='"required specifies if the variable is required.\\nNote: this applies to the variable as a whole and thus the\\ntop-level object defined in the schema. If nested fields are\\nrequired, this will be specified inside the schema."', args=[d.arg(name='required', type=d.T.boolean)]),
      withRequired(required): { required: required },
    },
    '#withAvailabilityGates':: d.fn(help='"availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\\n\\nNOTE: this field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster is using this ClusterClass, and this Cluster defines a custom list of availabilityGates,\\nsuch list overrides availabilityGates defined in this field."', args=[d.arg(name='availabilityGates', type=d.T.array)]),
    withAvailabilityGates(availabilityGates): { spec+: { availabilityGates: if std.isArray(v=availabilityGates) then availabilityGates else [availabilityGates] } },
    '#withAvailabilityGatesMixin':: d.fn(help='"availabilityGates specifies additional conditions to include when evaluating Cluster Available condition.\\n\\nNOTE: this field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster is using this ClusterClass, and this Cluster defines a custom list of availabilityGates,\\nsuch list overrides availabilityGates defined in this field."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='availabilityGates', type=d.T.array)]),
    withAvailabilityGatesMixin(availabilityGates): { spec+: { availabilityGates+: if std.isArray(v=availabilityGates) then availabilityGates else [availabilityGates] } },
    '#withPatches':: d.fn(help='"patches defines the patches which are applied to customize\\nreferenced templates of a ClusterClass.\\nNote: Patches will be applied in the order of the array."', args=[d.arg(name='patches', type=d.T.array)]),
    withPatches(patches): { spec+: { patches: if std.isArray(v=patches) then patches else [patches] } },
    '#withPatchesMixin':: d.fn(help='"patches defines the patches which are applied to customize\\nreferenced templates of a ClusterClass.\\nNote: Patches will be applied in the order of the array."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='patches', type=d.T.array)]),
    withPatchesMixin(patches): { spec+: { patches+: if std.isArray(v=patches) then patches else [patches] } },
    '#withVariables':: d.fn(help='"variables defines the variables which can be configured\\nin the Cluster topology and are then used in patches."', args=[d.arg(name='variables', type=d.T.array)]),
    withVariables(variables): { spec+: { variables: if std.isArray(v=variables) then variables else [variables] } },
    '#withVariablesMixin':: d.fn(help='"variables defines the variables which can be configured\\nin the Cluster topology and are then used in patches."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='variables', type=d.T.array)]),
    withVariablesMixin(variables): { spec+: { variables+: if std.isArray(v=variables) then variables else [variables] } },
    '#workers':: d.obj(help='"workers describes the worker nodes for the cluster.\\nIt is a collection of node types which can be used to create\\nthe worker nodes of the cluster."'),
    workers: {
      '#machineDeployments':: d.obj(help='"machineDeployments is a list of machine deployment classes that can be used to create\\na set of worker nodes."'),
      machineDeployments: {
        '#machineHealthCheck':: d.obj(help='"machineHealthCheck defines a MachineHealthCheck for this MachineDeploymentClass."'),
        machineHealthCheck: {
          '#remediationTemplate':: d.obj(help='"remediationTemplate is a reference to a remediation template\\nprovided by an infrastructure provider.\\n\\nThis field is completely optional, when filled, the MachineHealthCheck controller\\ncreates a new object from the template referenced and hands off remediation of the machine to\\na controller that lives outside of Cluster API."'),
          remediationTemplate: {
            '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { machineHealthCheck+: { remediationTemplate+: { apiVersion: apiVersion } } },
            '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { machineHealthCheck+: { remediationTemplate+: { fieldPath: fieldPath } } },
            '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { machineHealthCheck+: { remediationTemplate+: { kind: kind } } },
            '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { machineHealthCheck+: { remediationTemplate+: { name: name } } },
            '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { machineHealthCheck+: { remediationTemplate+: { namespace: namespace } } },
            '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
            withResourceVersion(resourceVersion): { machineHealthCheck+: { remediationTemplate+: { resourceVersion: resourceVersion } } },
            '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
            withUid(uid): { machineHealthCheck+: { remediationTemplate+: { uid: uid } } },
          },
          '#unhealthyConditions':: d.obj(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."'),
          unhealthyConditions: {
            '#withTimeout':: d.fn(help='"timeout is the duration that a node must be in a given status for,\\nafter which the node is considered unhealthy.\\nFor example, with a value of \\"1h\\", the node must match the status\\nfor at least 1 hour before being considered unhealthy."', args=[d.arg(name='timeout', type=d.T.string)]),
            withTimeout(timeout): { timeout: timeout },
            '#withType':: d.fn(help='"type of Node condition"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { type: type },
          },
          '#withMaxUnhealthy':: d.fn(help='"maxUnhealthy specifies the maximum number of unhealthy machines allowed.\\nAny further remediation is only allowed if at most \\"maxUnhealthy\\" machines selected by\\n\\"selector\\" are not healthy."', args=[d.arg(name='maxUnhealthy', type=d.T.any)]),
          withMaxUnhealthy(maxUnhealthy): { machineHealthCheck+: { maxUnhealthy: maxUnhealthy } },
          '#withNodeStartupTimeout':: d.fn(help="\"nodeStartupTimeout allows to set the maximum time for MachineHealthCheck\\nto consider a Machine unhealthy if a corresponding Node isn't associated\\nthrough a `Spec.ProviderID` field.\\n\\nThe duration set in this field is compared to the greatest of:\\n- Cluster's infrastructure ready condition timestamp (if and when available)\\n- Control Plane's initialized condition timestamp (if and when available)\\n- Machine's infrastructure ready condition timestamp (if and when available)\\n- Machine's metadata creation timestamp\\n\\nDefaults to 10 minutes.\\nIf you wish to disable this feature, set the value explicitly to 0.\"", args=[d.arg(name='nodeStartupTimeout', type=d.T.string)]),
          withNodeStartupTimeout(nodeStartupTimeout): { machineHealthCheck+: { nodeStartupTimeout: nodeStartupTimeout } },
          '#withUnhealthyConditions':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
          withUnhealthyConditions(unhealthyConditions): { machineHealthCheck+: { unhealthyConditions: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } },
          '#withUnhealthyConditionsMixin':: d.fn(help='"unhealthyConditions contains a list of the conditions that determine\\nwhether a node is considered unhealthy. The conditions are combined in a\\nlogical OR, i.e. if any of the conditions is met, the node is unhealthy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='unhealthyConditions', type=d.T.array)]),
          withUnhealthyConditionsMixin(unhealthyConditions): { machineHealthCheck+: { unhealthyConditions+: if std.isArray(v=unhealthyConditions) then unhealthyConditions else [unhealthyConditions] } },
          '#withUnhealthyRange':: d.fn(help='"unhealthyRange specifies the range of unhealthy machines allowed.\\nAny further remediation is only allowed if the number of machines selected by \\"selector\\" as not healthy\\nis within the range of \\"unhealthyRange\\". Takes precedence over maxUnhealthy.\\nEg. \\"[3-5]\\" - This means that remediation will be allowed only when:\\n(a) there are at least 3 unhealthy machines (and)\\n(b) there are at most 5 unhealthy machines"', args=[d.arg(name='unhealthyRange', type=d.T.string)]),
          withUnhealthyRange(unhealthyRange): { machineHealthCheck+: { unhealthyRange: unhealthyRange } },
        },
        '#namingStrategy':: d.obj(help='"namingStrategy allows changing the naming pattern used when creating the MachineDeployment."'),
        namingStrategy: {
          '#withTemplate':: d.fn(help='"template defines the template to use for generating the name of the MachineDeployment object.\\nIf not defined, it will fallback to `{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{ .random }}`.\\nIf the templated string exceeds 63 characters, it will be trimmed to 58 characters and will\\nget concatenated with a random suffix of length 5.\\nThe templating mechanism provides the following arguments:\\n* `.cluster.name`: The name of the cluster object.\\n* `.random`: A random alphanumeric string, without vowels, of length 5.\\n* `.machineDeployment.topologyName`: The name of the MachineDeployment topology (Cluster.spec.topology.workers.machineDeployments[].name)."', args=[d.arg(name='template', type=d.T.string)]),
          withTemplate(template): { namingStrategy+: { template: template } },
        },
        '#readinessGates':: d.obj(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster defines a custom list of readinessGates for a MachineDeployment using this MachineDeploymentClass,\\nsuch list overrides readinessGates defined in this field.\""),
        readinessGates: {
          '#withConditionType':: d.fn(help="\"conditionType refers to a condition with matching type in the Machine's condition list.\\nIf the conditions doesn't exist, it will be treated as unknown.\\nNote: Both Cluster API conditions or conditions added by 3rd party controllers can be used as readiness gates.\"", args=[d.arg(name='conditionType', type=d.T.string)]),
          withConditionType(conditionType): { conditionType: conditionType },
          '#withPolarity':: d.fn(help='"polarity of the conditionType specified in this readinessGate.\\nValid values are Positive, Negative and omitted.\\nWhen omitted, the default behaviour will be Positive.\\nA positive polarity means that the condition should report a true status under normal conditions.\\nA negative polarity means that the condition should report a false status under normal conditions."', args=[d.arg(name='polarity', type=d.T.string)]),
          withPolarity(polarity): { polarity: polarity },
        },
        '#strategy':: d.obj(help='"strategy is the deployment strategy to use to replace existing machines with\\nnew ones.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass."'),
        strategy: {
          '#remediation':: d.obj(help='"remediation controls the strategy of remediating unhealthy machines\\nand how remediating operations should occur during the lifecycle of the dependant MachineSets."'),
          remediation: {
            '#withMaxInFlight':: d.fn(help="\"maxInFlight determines how many in flight remediations should happen at the same time.\\n\\nRemediation only happens on the MachineSet with the most current revision, while\\nolder MachineSets (usually present during rollout operations) aren't allowed to remediate.\\n\\nNote: In general (independent of remediations), unhealthy machines are always\\nprioritized during scale down operations over healthy ones.\\n\\nMaxInFlight can be set to a fixed number or a percentage.\\nExample: when this is set to 20%, the MachineSet controller deletes at most 20% of\\nthe desired replicas.\\n\\nIf not set, remediation is limited to all machines (bounded by replicas)\\nunder the active MachineSet's management.\"", args=[d.arg(name='maxInFlight', type=d.T.any)]),
            withMaxInFlight(maxInFlight): { strategy+: { remediation+: { maxInFlight: maxInFlight } } },
          },
          '#rollingUpdate':: d.obj(help='"rollingUpdate is the rolling update config params. Present only if\\nMachineDeploymentStrategyType = RollingUpdate."'),
          rollingUpdate: {
            '#withDeletePolicy':: d.fn(help='"deletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling.\\nValid values are \\"Random, \\"Newest\\", \\"Oldest\\"\\nWhen no value is supplied, the default DeletePolicy of MachineSet is used"', args=[d.arg(name='deletePolicy', type=d.T.string)]),
            withDeletePolicy(deletePolicy): { strategy+: { rollingUpdate+: { deletePolicy: deletePolicy } } },
            '#withMaxSurge':: d.fn(help='"maxSurge is the maximum number of machines that can be scheduled above the\\ndesired number of machines.\\nValue can be an absolute number (ex: 5) or a percentage of\\ndesired machines (ex: 10%).\\nThis can not be 0 if MaxUnavailable is 0.\\nAbsolute number is calculated from percentage by rounding up.\\nDefaults to 1.\\nExample: when this is set to 30%, the new MachineSet can be scaled\\nup immediately when the rolling update starts, such that the total\\nnumber of old and new machines do not exceed 130% of desired\\nmachines. Once old machines have been killed, new MachineSet can\\nbe scaled up further, ensuring that total number of machines running\\nat any time during the update is at most 130% of desired machines."', args=[d.arg(name='maxSurge', type=d.T.any)]),
            withMaxSurge(maxSurge): { strategy+: { rollingUpdate+: { maxSurge: maxSurge } } },
            '#withMaxUnavailable':: d.fn(help='"maxUnavailable is the maximum number of machines that can be unavailable during the update.\\nValue can be an absolute number (ex: 5) or a percentage of desired\\nmachines (ex: 10%).\\nAbsolute number is calculated from percentage by rounding down.\\nThis can not be 0 if MaxSurge is 0.\\nDefaults to 0.\\nExample: when this is set to 30%, the old MachineSet can be scaled\\ndown to 70% of desired machines immediately when the rolling update\\nstarts. Once new machines are ready, old MachineSet can be scaled\\ndown further, followed by scaling up the new MachineSet, ensuring\\nthat the total number of machines available at all times\\nduring the update is at least 70% of desired machines."', args=[d.arg(name='maxUnavailable', type=d.T.any)]),
            withMaxUnavailable(maxUnavailable): { strategy+: { rollingUpdate+: { maxUnavailable: maxUnavailable } } },
          },
          '#withType':: d.fn(help='"type of deployment. Allowed values are RollingUpdate and OnDelete.\\nThe default is RollingUpdate."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { strategy+: { type: type } },
        },
        '#template':: d.obj(help='"template is a local struct containing a collection of templates for creation of\\nMachineDeployment objects representing a set of worker nodes."'),
        template: {
          '#bootstrap':: d.obj(help='"bootstrap contains the bootstrap template reference to be used\\nfor the creation of worker Machines."'),
          bootstrap: {
            '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
            ref: {
              '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { template+: { bootstrap+: { ref+: { apiVersion: apiVersion } } } },
              '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { template+: { bootstrap+: { ref+: { fieldPath: fieldPath } } } },
              '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { template+: { bootstrap+: { ref+: { kind: kind } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { template+: { bootstrap+: { ref+: { name: name } } } },
              '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { template+: { bootstrap+: { ref+: { namespace: namespace } } } },
              '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
              withResourceVersion(resourceVersion): { template+: { bootstrap+: { ref+: { resourceVersion: resourceVersion } } } },
              '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
              withUid(uid): { template+: { bootstrap+: { ref+: { uid: uid } } } },
            },
          },
          '#infrastructure':: d.obj(help='"infrastructure contains the infrastructure template reference to be used\\nfor the creation of worker Machines."'),
          infrastructure: {
            '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
            ref: {
              '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { template+: { infrastructure+: { ref+: { apiVersion: apiVersion } } } },
              '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { template+: { infrastructure+: { ref+: { fieldPath: fieldPath } } } },
              '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { template+: { infrastructure+: { ref+: { kind: kind } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { template+: { infrastructure+: { ref+: { name: name } } } },
              '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { template+: { infrastructure+: { ref+: { namespace: namespace } } } },
              '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
              withResourceVersion(resourceVersion): { template+: { infrastructure+: { ref+: { resourceVersion: resourceVersion } } } },
              '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
              withUid(uid): { template+: { infrastructure+: { ref+: { uid: uid } } } },
            },
          },
          '#metadata':: d.obj(help='"metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment.\\nAt runtime this metadata is merged with the corresponding metadata from the topology."'),
          metadata: {
            '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { template+: { metadata+: { annotations: annotations } } },
            '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { template+: { metadata+: { annotations+: annotations } } },
            '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { template+: { metadata+: { labels: labels } } },
            '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { template+: { metadata+: { labels+: labels } } },
          },
        },
        '#withClass':: d.fn(help='"class denotes a type of worker node present in the cluster,\\nthis name MUST be unique within a ClusterClass and can be referenced\\nin the Cluster to create a managed MachineDeployment."', args=[d.arg(name='class', type=d.T.string)]),
        withClass(class): { class: class },
        '#withFailureDomain':: d.fn(help='"failureDomain is the failure domain the machines will be created in.\\nMust match a key in the FailureDomains map stored on the cluster object.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass."', args=[d.arg(name='failureDomain', type=d.T.string)]),
        withFailureDomain(failureDomain): { failureDomain: failureDomain },
        '#withMinReadySeconds':: d.fn(help='"minReadySeconds is the minimum number of seconds for which a newly created machine should\\nbe ready.\\nDefaults to 0 (machine will be considered available as soon as it\\nis ready)\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass."', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
        withMinReadySeconds(minReadySeconds): { minReadySeconds: minReadySeconds },
        '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\\nhosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
        withNodeDeletionTimeout(nodeDeletionTimeout): { nodeDeletionTimeout: nodeDeletionTimeout },
        '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass."', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
        withNodeDrainTimeout(nodeDrainTimeout): { nodeDrainTimeout: nodeDrainTimeout },
        '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
        withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout },
        '#withReadinessGates':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster defines a custom list of readinessGates for a MachineDeployment using this MachineDeploymentClass,\\nsuch list overrides readinessGates defined in this field.\"", args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGates(readinessGates): { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] },
        '#withReadinessGatesMixin':: d.fn(help="\"readinessGates specifies additional conditions to include when evaluating Machine Ready condition.\\n\\nThis field can be used e.g. to instruct the machine controller to include in the computation for Machine's ready\\ncomputation a condition, managed by an external controllers, reporting the status of special software/hardware installed on the Machine.\\n\\nNOTE: This field is considered only for computing v1beta2 conditions.\\nNOTE: If a Cluster defines a custom list of readinessGates for a MachineDeployment using this MachineDeploymentClass,\\nsuch list overrides readinessGates defined in this field.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGatesMixin(readinessGates): { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] },
      },
      '#machinePools':: d.obj(help='"machinePools is a list of machine pool classes that can be used to create\\na set of worker nodes."'),
      machinePools: {
        '#namingStrategy':: d.obj(help='"namingStrategy allows changing the naming pattern used when creating the MachinePool."'),
        namingStrategy: {
          '#withTemplate':: d.fn(help='"template defines the template to use for generating the name of the MachinePool object.\\nIf not defined, it will fallback to `{{ .cluster.name }}-{{ .machinePool.topologyName }}-{{ .random }}`.\\nIf the templated string exceeds 63 characters, it will be trimmed to 58 characters and will\\nget concatenated with a random suffix of length 5.\\nThe templating mechanism provides the following arguments:\\n* `.cluster.name`: The name of the cluster object.\\n* `.random`: A random alphanumeric string, without vowels, of length 5.\\n* `.machinePool.topologyName`: The name of the MachinePool topology (Cluster.spec.topology.workers.machinePools[].name)."', args=[d.arg(name='template', type=d.T.string)]),
          withTemplate(template): { namingStrategy+: { template: template } },
        },
        '#template':: d.obj(help='"template is a local struct containing a collection of templates for creation of\\nMachinePools objects representing a pool of worker nodes."'),
        template: {
          '#bootstrap':: d.obj(help='"bootstrap contains the bootstrap template reference to be used\\nfor the creation of the Machines in the MachinePool."'),
          bootstrap: {
            '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
            ref: {
              '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { template+: { bootstrap+: { ref+: { apiVersion: apiVersion } } } },
              '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { template+: { bootstrap+: { ref+: { fieldPath: fieldPath } } } },
              '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { template+: { bootstrap+: { ref+: { kind: kind } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { template+: { bootstrap+: { ref+: { name: name } } } },
              '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { template+: { bootstrap+: { ref+: { namespace: namespace } } } },
              '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
              withResourceVersion(resourceVersion): { template+: { bootstrap+: { ref+: { resourceVersion: resourceVersion } } } },
              '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
              withUid(uid): { template+: { bootstrap+: { ref+: { uid: uid } } } },
            },
          },
          '#infrastructure':: d.obj(help='"infrastructure contains the infrastructure template reference to be used\\nfor the creation of the MachinePool."'),
          infrastructure: {
            '#ref':: d.obj(help='"ref is a required reference to a custom resource\\noffered by a provider."'),
            ref: {
              '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { template+: { infrastructure+: { ref+: { apiVersion: apiVersion } } } },
              '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\"spec.containers[2]\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { template+: { infrastructure+: { ref+: { fieldPath: fieldPath } } } },
              '#withKind':: d.fn(help='"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { template+: { infrastructure+: { ref+: { kind: kind } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { template+: { infrastructure+: { ref+: { name: name } } } },
              '#withNamespace':: d.fn(help='"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
              withNamespace(namespace): { template+: { infrastructure+: { ref+: { namespace: namespace } } } },
              '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
              withResourceVersion(resourceVersion): { template+: { infrastructure+: { ref+: { resourceVersion: resourceVersion } } } },
              '#withUid':: d.fn(help='"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
              withUid(uid): { template+: { infrastructure+: { ref+: { uid: uid } } } },
            },
          },
          '#metadata':: d.obj(help='"metadata is the metadata applied to the MachinePool.\\nAt runtime this metadata is merged with the corresponding metadata from the topology."'),
          metadata: {
            '#withAnnotations':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { template+: { metadata+: { annotations: annotations } } },
            '#withAnnotationsMixin':: d.fn(help='"annotations is an unstructured key value map stored with a resource that may be\\nset by external tools to store and retrieve arbitrary metadata. They are not\\nqueryable and should be preserved when modifying objects.\\nMore info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { template+: { metadata+: { annotations+: annotations } } },
            '#withLabels':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { template+: { metadata+: { labels: labels } } },
            '#withLabelsMixin':: d.fn(help='"labels is a map of string keys and values that can be used to organize and categorize\\n(scope and select) objects. May match selectors of replication controllers\\nand services.\\nMore info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { template+: { metadata+: { labels+: labels } } },
          },
        },
        '#withClass':: d.fn(help='"class denotes a type of machine pool present in the cluster,\\nthis name MUST be unique within a ClusterClass and can be referenced\\nin the Cluster to create a managed MachinePool."', args=[d.arg(name='class', type=d.T.string)]),
        withClass(class): { class: class },
        '#withFailureDomains':: d.fn(help='"failureDomains is the list of failure domains the MachinePool should be attached to.\\nMust match a key in the FailureDomains map stored on the cluster object.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass."', args=[d.arg(name='failureDomains', type=d.T.array)]),
        withFailureDomains(failureDomains): { failureDomains: if std.isArray(v=failureDomains) then failureDomains else [failureDomains] },
        '#withFailureDomainsMixin':: d.fn(help='"failureDomains is the list of failure domains the MachinePool should be attached to.\\nMust match a key in the FailureDomains map stored on the cluster object.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='failureDomains', type=d.T.array)]),
        withFailureDomainsMixin(failureDomains): { failureDomains+: if std.isArray(v=failureDomains) then failureDomains else [failureDomains] },
        '#withMinReadySeconds':: d.fn(help='"minReadySeconds is the minimum number of seconds for which a newly created machine pool should\\nbe ready.\\nDefaults to 0 (machine will be considered available as soon as it\\nis ready)\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass."', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
        withMinReadySeconds(minReadySeconds): { minReadySeconds: minReadySeconds },
        '#withNodeDeletionTimeout':: d.fn(help='"nodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine\\nhosts after the Machine Pool is marked for deletion. A duration of 0 will retry deletion indefinitely.\\nDefaults to 10 seconds.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass."', args=[d.arg(name='nodeDeletionTimeout', type=d.T.string)]),
        withNodeDeletionTimeout(nodeDeletionTimeout): { nodeDeletionTimeout: nodeDeletionTimeout },
        '#withNodeDrainTimeout':: d.fn(help='"nodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\\nThe default value is 0, meaning that the node can be drained without any time limitations.\\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass."', args=[d.arg(name='nodeDrainTimeout', type=d.T.string)]),
        withNodeDrainTimeout(nodeDrainTimeout): { nodeDrainTimeout: nodeDrainTimeout },
        '#withNodeVolumeDetachTimeout':: d.fn(help='"nodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes\\nto be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.\\nNOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass."', args=[d.arg(name='nodeVolumeDetachTimeout', type=d.T.string)]),
        withNodeVolumeDetachTimeout(nodeVolumeDetachTimeout): { nodeVolumeDetachTimeout: nodeVolumeDetachTimeout },
      },
      '#withMachineDeployments':: d.fn(help='"machineDeployments is a list of machine deployment classes that can be used to create\\na set of worker nodes."', args=[d.arg(name='machineDeployments', type=d.T.array)]),
      withMachineDeployments(machineDeployments): { spec+: { workers+: { machineDeployments: if std.isArray(v=machineDeployments) then machineDeployments else [machineDeployments] } } },
      '#withMachineDeploymentsMixin':: d.fn(help='"machineDeployments is a list of machine deployment classes that can be used to create\\na set of worker nodes."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='machineDeployments', type=d.T.array)]),
      withMachineDeploymentsMixin(machineDeployments): { spec+: { workers+: { machineDeployments+: if std.isArray(v=machineDeployments) then machineDeployments else [machineDeployments] } } },
      '#withMachinePools':: d.fn(help='"machinePools is a list of machine pool classes that can be used to create\\na set of worker nodes."', args=[d.arg(name='machinePools', type=d.T.array)]),
      withMachinePools(machinePools): { spec+: { workers+: { machinePools: if std.isArray(v=machinePools) then machinePools else [machinePools] } } },
      '#withMachinePoolsMixin':: d.fn(help='"machinePools is a list of machine pool classes that can be used to create\\na set of worker nodes."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='machinePools', type=d.T.array)]),
      withMachinePoolsMixin(machinePools): { spec+: { workers+: { machinePools+: if std.isArray(v=machinePools) then machinePools else [machinePools] } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
